connector/__init__.py:
  create_remote_connector(url,**kwargs)
  get_connector_type(client)
connector/base_connector.py:
  BaseConnector.__del__(self)
  BaseConnector.__enter__(self)
  BaseConnector.__exit__(self,exc_type,exc_value,traceback)
  BaseConnector.__init__(self,url)
  BaseConnector._close_by_signal(self,existing_handler)
  BaseConnector.close(self)
  BaseConnector.get_local_dir(self)
  BaseConnector.new_handler(signum,frame)
  BaseConnector.pull_files(self,allow_pattern,ignore_pattern)
  BaseConnector.weight_iterator(self,rank)
  BaseFileConnector.glob(self,allow_pattern)
  BaseKVConnector.get(self,key)
  BaseKVConnector.getstr(self,key)
  BaseKVConnector.list(self,prefix)
  BaseKVConnector.set(self,key,obj)
  BaseKVConnector.setstr(self,key,obj)
connector/redis.py:
  RedisConnector.__init__(self,url)
  RedisConnector.close(self)
  RedisConnector.get(self,key)
  RedisConnector.getstr(self,key)
  RedisConnector.list(self,prefix)
  RedisConnector.pull_files(self,allow_pattern,ignore_pattern)
  RedisConnector.set(self,key,tensor)
  RedisConnector.setstr(self,key,obj)
  RedisConnector.weight_iterator(self,rank)
connector/s3.py:
  S3Connector.__init__(self,url)
  S3Connector.close(self)
  S3Connector.glob(self,allow_pattern)
  S3Connector.pull_files(self,allow_pattern,ignore_pattern)
  S3Connector.weight_iterator(self,rank)
  _filter_allow(paths,patterns)
  _filter_ignore(paths,patterns)
  list_files(s3,path,allow_pattern,ignore_pattern)
connector/serde/__init__.py:
  create_serde(serde_type)
connector/serde/safe_serde.py:
  SafeDeserializer.__init__(self)
  SafeDeserializer.from_bytes(self,b)
  SafeDeserializer.from_bytes_normal(self,b)
  SafeSerializer.__init__(self)
  SafeSerializer.to_bytes(self,t)
connector/serde/serde.py:
  Deserializer.__init__(self,dtype)
  Deserializer.from_bytes(self,bs)
  Serializer.to_bytes(self,t)
connector/utils.py:
  parse_model_name(url)
  pull_files_from_db(connector,model_name,allow_pattern,ignore_pattern)
