constrained/base_grammar_backend.py:
  BaseGrammarBackend.__init__(self)
  BaseGrammarBackend._init_value_dispatch(self,key)
  BaseGrammarBackend._not_supported(self,key_type,key_string)
  BaseGrammarBackend.dispatch_ebnf(self,key_string)
  BaseGrammarBackend.dispatch_fallback(self,key_type,key_string)
  BaseGrammarBackend.dispatch_json(self,key_string)
  BaseGrammarBackend.dispatch_regex(self,key_string)
  BaseGrammarBackend.dispatch_structural_tag(self,key_string)
  BaseGrammarBackend.get_cached_or_future_value(self,key)
  BaseGrammarBackend.reset(self)
  BaseGrammarBackend.set_cache(self,key,value)
  BaseGrammarObject.__init__(self)
  BaseGrammarObject.accept_token(self,token)
  BaseGrammarObject.allocate_vocab_mask(self,vocab_size,batch_size,device)
  BaseGrammarObject.apply_vocab_mask(logits,vocab_mask)
  BaseGrammarObject.copy(self)
  BaseGrammarObject.fill_vocab_mask(self,vocab_mask,idx)
  BaseGrammarObject.finished(self)
  BaseGrammarObject.finished(self,finished)
  BaseGrammarObject.is_terminated(self)
  BaseGrammarObject.jump_and_retokenize(self,old_output_ids,new_output_ids,next_state)
  BaseGrammarObject.jump_forward_str_state(self,helper)
  BaseGrammarObject.move_vocab_mask(vocab_mask,device)
  BaseGrammarObject.rollback(self,k)
  BaseGrammarObject.try_jump_forward(self,tokenizer)
  create_grammar_backend(server_args,tokenizer,vocab_size,eos_token_ids)
constrained/llguidance_backend.py:
  GuidanceBackend.__init__(self,tokenizer,whitespace_pattern,n_vocab)
  GuidanceBackend._from_serialized(self,serialized_grammar)
  GuidanceBackend.dispatch_ebnf(self,key_string)
  GuidanceBackend.dispatch_json(self,key_string)
  GuidanceBackend.dispatch_regex(self,key_string)
  GuidanceBackend.dispatch_structural_tag(self,key_string)
  GuidanceGrammar.__init__(self,llguidance_tokenizer,serialized_grammar)
  GuidanceGrammar.accept_token(self,token)
  GuidanceGrammar.allocate_vocab_mask(self,vocab_size,batch_size,device)
  GuidanceGrammar.apply_vocab_mask(logits,vocab_mask)
  GuidanceGrammar.copy(self)
  GuidanceGrammar.fill_vocab_mask(self,vocab_mask,idx)
  GuidanceGrammar.jump_and_retokenize(self,old_output_ids,new_output_ids,next_state)
  GuidanceGrammar.jump_forward_str_state(self,helper)
  GuidanceGrammar.move_vocab_mask(vocab_mask,device)
  GuidanceGrammar.try_jump_forward(self,tokenizer)
constrained/outlines_backend.py:
  OutlinesGrammar.__init__(self,guide,jump_forward_map)
  OutlinesGrammar.accept_token(self,token)
  OutlinesGrammar.allocate_vocab_mask(self,vocab_size,batch_size,device)
  OutlinesGrammar.apply_vocab_mask(logits,vocab_mask)
  OutlinesGrammar.copy(self)
  OutlinesGrammar.fill_vocab_mask(self,vocab_mask,idx)
  OutlinesGrammar.jump_and_retokenize(self,old_output_ids,new_output_ids,next_state)
  OutlinesGrammar.jump_forward_str_state(self,helper)
  OutlinesGrammar.move_vocab_mask(vocab_mask,device)
  OutlinesGrammar.try_jump_forward(self,tokenizer)
  OutlinesGrammarBackend.__init__(self,tokenizer,whitespace_pattern)
  OutlinesGrammarBackend._compile_regex(self,regex)
  OutlinesGrammarBackend.dispatch_ebnf(self,key_string)
  OutlinesGrammarBackend.dispatch_json(self,key_string)
  OutlinesGrammarBackend.dispatch_regex(self,key_string)
  OutlinesGrammarBackend.dispatch_structural_tag(self,key_string)
  OutlinesGrammarBackend.fset(self,value)
  build_regex_from_object(object,whitespace_pattern)
constrained/outlines_jump_forward.py:
  OutlinesJumpForwardMap.__init__(self,regex_string)
  OutlinesJumpForwardMap.is_jump_forward_symbol_state(self,state)
  OutlinesJumpForwardMap.jump_forward_byte(self,state)
  OutlinesJumpForwardMap.jump_forward_symbol(self,state)
  disk_cache(expire,typed,ignore)
  init_state_to_jump_forward(regex_string)
  test_main(regex_string)
constrained/reasoner_grammar_backend.py:
  ReasonerGrammarBackend.__init__(self,grammar_backend,think_end_id)
  ReasonerGrammarBackend._init_value_dispatch(self,key)
  ReasonerGrammarObject.__init__(self,grammar,think_end_id)
  ReasonerGrammarObject.accept_token(self,token)
  ReasonerGrammarObject.allocate_vocab_mask(self,vocab_size,batch_size,device)
  ReasonerGrammarObject.apply_vocab_mask(self)
  ReasonerGrammarObject.copy(self)
  ReasonerGrammarObject.fill_vocab_mask(self,vocab_mask,idx)
  ReasonerGrammarObject.finished(self)
  ReasonerGrammarObject.finished(self,finished)
  ReasonerGrammarObject.jump_and_retokenize(self,old_output_ids,new_output_ids,next_state)
  ReasonerGrammarObject.jump_forward_str_state(self,helper)
  ReasonerGrammarObject.move_vocab_mask(self,vocab_mask,device)
  ReasonerGrammarObject.try_jump_forward(self,tokenizer)
constrained/triton_ops/bitmask_ops.py:
  apply_token_bitmask_inplace_kernel(logits_ptr,bitmask_ptr,indices_ptr,num_rows,vocab_size,logits_strides,bitmask_strides,NUM_SMS,BLOCK_SIZE)
  apply_token_bitmask_inplace_triton(logits,bitmask,indices)
constrained/xgrammar_backend.py:
  XGrammarGrammar.__init__(self,matcher,vocab_size,ctx,override_stop_tokens,key_string)
  XGrammarGrammar.__repr__(self)
  XGrammarGrammar.accept_token(self,token)
  XGrammarGrammar.allocate_vocab_mask(self,vocab_size,batch_size,device)
  XGrammarGrammar.apply_vocab_mask(self,logits,vocab_mask)
  XGrammarGrammar.copy(self)
  XGrammarGrammar.fill_vocab_mask(self,vocab_mask,idx)
  XGrammarGrammar.is_terminated(self)
  XGrammarGrammar.jump_and_retokenize(self,old_output_ids,new_output_ids,next_state)
  XGrammarGrammar.jump_forward_str_state(self,helper)
  XGrammarGrammar.move_vocab_mask(vocab_mask,device)
  XGrammarGrammar.rollback(self,k)
  XGrammarGrammar.try_jump_forward(self,tokenizer)
  XGrammarGrammarBackend.__init__(self,tokenizer,vocab_size,model_eos_token_ids)
  XGrammarGrammarBackend._from_context(self,ctx,key_string)
  XGrammarGrammarBackend.dispatch_ebnf(self,key_string)
  XGrammarGrammarBackend.dispatch_json(self,key_string)
  XGrammarGrammarBackend.dispatch_regex(self,key_string)
  XGrammarGrammarBackend.dispatch_structural_tag(self,key_string)
  XGrammarGrammarBackend.reset(self)
