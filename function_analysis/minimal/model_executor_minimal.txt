model_executor/cuda_graph_runner.py:
  CudaGraphRunner.__init__(self,model_runner)
  CudaGraphRunner._cache_loc_dtype(self)
  CudaGraphRunner._capture_graph(self,graph,pool,stream,run_once_fn)
  CudaGraphRunner._create_device_graph(self)
  CudaGraphRunner.can_run(self,forward_batch)
  CudaGraphRunner.capture(self)
  CudaGraphRunner.capture_one_batch_size(self,bs,forward)
  CudaGraphRunner.get_spec_info(self,num_tokens)
  CudaGraphRunner.recapture_if_needed(self,forward_batch)
  CudaGraphRunner.replay(self,forward_batch,skip_attn_backend_init,pp_proxy_tensors)
  CudaGraphRunner.replay_prepare(self,forward_batch,pp_proxy_tensors)
  CudaGraphRunner.run_once()
  _to_torch(model,reverse,num_tokens)
  freeze_gc(enable_cudagraph_gc)
  get_batch_sizes_to_capture(model_runner)
  get_global_graph_memory_pool()
  get_is_capture_mode()
  model_capture_mode()
  patch_model(model,enable_compile,num_tokens,tp_group)
  set_global_graph_memory_pool(val)
  set_torch_compile_config()
model_executor/forward_batch_info.py:
  CaptureHiddenMode.__lt__(self,other)
  CaptureHiddenMode.is_full(self)
  CaptureHiddenMode.is_last(self)
  CaptureHiddenMode.need_capture(self)
  ForwardBatch._compute_mrope_positions(self,model_runner,batch)
  ForwardBatch._pad_tensor_to_size(self,tensor,size,value)
  ForwardBatch.can_run_tbo(self)
  ForwardBatch.contains_audio_inputs(self)
  ForwardBatch.contains_image_inputs(self)
  ForwardBatch.contains_mm_inputs(self)
  ForwardBatch.contains_video_inputs(self)
  ForwardBatch.get_max_chunk_capacity(self)
  ForwardBatch.get_prefix_chunk_seq_lens(self,prefix_lens,num_prefix_chunks,prefix_chunk_len)
  ForwardBatch.init_new(cls,batch,model_runner)
  ForwardBatch.merge_mm_inputs(self)
  ForwardBatch.post_forward_mlp_sync_batch(self,logits_output)
  ForwardBatch.prepare_chunked_kv_indices(self,device)
  ForwardBatch.prepare_chunked_prefix_cache_info(self,device)
  ForwardBatch.prepare_mlp_sync_batch(self,model_runner)
  ForwardBatch.set_attn_attend_prefix_cache(self,attn_attend_prefix_cache)
  ForwardBatch.set_prefix_chunk_idx(self,idx)
  ForwardMode.is_cuda_graph(self)
  ForwardMode.is_decode(self)
  ForwardMode.is_decode_or_idle(self)
  ForwardMode.is_draft_extend(self)
  ForwardMode.is_dummy_first(self)
  ForwardMode.is_extend(self)
  ForwardMode.is_extend_or_draft_extend_or_mixed(self)
  ForwardMode.is_idle(self)
  ForwardMode.is_mixed(self)
  ForwardMode.is_prefill(self)
  ForwardMode.is_split_prefill(self)
  ForwardMode.is_target_verify(self)
  PPProxyTensors.__eq__(self,other)
  PPProxyTensors.__getitem__(self,key)
  PPProxyTensors.__init__(self,tensors)
  PPProxyTensors.__len__(self)
  PPProxyTensors.__repr__(self)
  PPProxyTensors.__setitem__(self,key,value)
  clamp_position(seq_lens)
  compute_position(attn_backend,extend_prefix_lens,extend_seq_lens,extend_seq_lens_sum)
  compute_position_kernel(positions,extend_start_loc,extend_prefix_lens,extend_seq_lens,has_prefix)
  compute_position_torch(extend_prefix_lens,extend_seq_lens)
  compute_position_triton(extend_prefix_lens,extend_seq_lens,extend_seq_lens_sum)
  create_chunked_prefix_cache_kv_indices(req_to_token_ptr,req_pool_indices_ptr,chunk_start_idx_ptr,chunk_seq_lens_ptr,chunk_cu_seq_lens_ptr,chunk_kv_indices_ptr,req_to_token_ptr_stride)
  enable_num_token_non_padded(server_args)
model_executor/model_runner.py:
  LocalSerializedTensor.get(self,rank)
  ModelRunner.__init__(self,model_config,mem_fraction_static,gpu_id,tp_rank,tp_size,moe_ep_rank,moe_ep_size,pp_rank,pp_size,nccl_port,server_args,dp_rank,is_draft_worker,req_to_token_pool,token_to_kv_pool_allocator)
  ModelRunner._forward_raw(self,forward_batch,skip_attn_backend_init,pp_proxy_tensors,reinit_attn_backend,split_forward_count)
  ModelRunner._get_attention_backend(self)
  ModelRunner._get_attention_backend_from_str(self,backend_str)
  ModelRunner._preprocess_logits(self,logits_output,sampling_info)
  ModelRunner._update_weights_from_flattened_bucket(self,flattened_tensor_bucket_dict)
  ModelRunner.apply_torch_tp(self)
  ModelRunner.forward(self,forward_batch,skip_attn_backend_init,pp_proxy_tensors,reinit_attn_backend,split_forward_count)
  ModelRunner.forward_decode(self,forward_batch,skip_attn_backend_init,pp_proxy_tensors)
  ModelRunner.forward_extend(self,forward_batch,skip_attn_backend_init,pp_proxy_tensors)
  ModelRunner.forward_idle(self,forward_batch,pp_proxy_tensors)
  ModelRunner.forward_split_prefill(self,forward_batch,reinit_attn_backend,forward_count)
  ModelRunner.get_weight_iter(config)
  ModelRunner.get_weights_by_name(self,name,truncate_size)
  ModelRunner.init_attention_backend(self)
  ModelRunner.init_cublas(self)
  ModelRunner.init_device_graphs(self)
  ModelRunner.init_double_sparsity_channel_config(self,selected_channel)
  ModelRunner.init_lora_manager(self)
  ModelRunner.init_memory_pool(self,total_gpu_memory,max_num_reqs,max_total_tokens)
  ModelRunner.init_threads_binding(self)
  ModelRunner.init_torch_distributed(self)
  ModelRunner.init_weights_update_group(self,master_address,master_port,rank_offset,world_size,group_name,backend)
  ModelRunner.initialize(self,min_per_gpu_memory)
  ModelRunner.load_lora_adapter(self,lora_ref)
  ModelRunner.load_model(self)
  ModelRunner.model_is_mrope(self)
  ModelRunner.model_load_weights(model,iter)
  ModelRunner.model_specific_adjustment(self)
  ModelRunner.profile_max_num_token(self,total_gpu_memory)
  ModelRunner.sample(self,logits_output,forward_batch)
  ModelRunner.save_remote_model(self,url)
  ModelRunner.save_sharded_model(self,path,pattern,max_size)
  ModelRunner.set_num_token_hybrid(self)
  ModelRunner.unload_lora_adapter(self,lora_ref)
  ModelRunner.update_expert_location(self,new_expert_location_metadata,update_layer_ids)
  ModelRunner.update_weights_from_disk(self,model_path,load_format)
  ModelRunner.update_weights_from_distributed(self,names,dtypes,shapes,group_name)
  ModelRunner.update_weights_from_tensor(self,named_tensors,load_format)
  RankZeroFilter.__init__(self,is_rank_zero)
  RankZeroFilter.filter(self,record)
  _model_load_weights_direct(model,named_tensors)
  _unwrap_tensor(tensor,tp_rank,device)
model_executor/npu_graph_runner.py:
  NPUGraphRunner.__init__(self,model_runner)
  NPUGraphRunner._cache_loc_dtype(self)
  NPUGraphRunner._capture_graph(self,graph,pool,stream,run_once_fn)
  NPUGraphRunner._create_device_graph(self)
  NPUGraphRunner._update_inputs(self,seq_lens)
  NPUGraphRunner.replay(self,forward_batch,skip_attn_backend_init,pp_proxy_tensors)
