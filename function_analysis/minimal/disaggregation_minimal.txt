disaggregation/ascend/conn.py:
  AscendKVManager.init_engine(self)
  AscendKVManager.process_layer(src_ptr,dst_ptr,item_len)
  AscendKVManager.process_layers(layers_params)
  AscendKVManager.register_buffer_to_engine(self)
  AscendKVManager.send_kvcache(self,mooncake_session_id,prefill_kv_indices,dst_kv_ptrs,dst_kv_indices,executor)
  AscendKVManager.set_transfer_blocks(src_ptr,dst_ptr,item_len)
disaggregation/ascend/transfer_engine.py:
  AscendTransferEngine.__init__(self,hostname,npu_id,disaggregation_mode)
  AscendTransferEngine.batch_register(self,ptrs,lengths)
  AscendTransferEngine.initialize(self)
disaggregation/base/conn.py:
  BaseKVBootstrapServer.__init__(self,port)
  BaseKVManager.__init__(self,args,disaggregation_mode,server_args,is_mla_backend)
  BaseKVReceiver.__init__(self,mgr,bootstrap_addr,bootstrap_room)
  BaseKVReceiver.failure_exception(self)
  BaseKVReceiver.init(self,kv_indices,aux_index)
  BaseKVReceiver.poll(self)
  BaseKVSender.__init__(self,mgr,bootstrap_addr,bootstrap_room,dest_tp_ranks,pp_rank)
  BaseKVSender.failure_exception(self)
  BaseKVSender.init(self,num_kv_indices,aux_index)
  BaseKVSender.poll(self)
  BaseKVSender.send(self,kv_indices)
disaggregation/common/conn.py:
  CommonKVBootstrapServer.__init__(self,port)
  CommonKVBootstrapServer._run_server(self)
  CommonKVBootstrapServer._setup_routes(self)
  CommonKVBootstrapServer.close(self)
  CommonKVBootstrapServer.poll(self)
  CommonKVBootstrapServer.run(self)
  CommonKVManager.__init__(self,args,disaggregation_mode,server_args,is_mla_backend)
  CommonKVManager._connect(self,endpoint,is_ipv6)
  CommonKVManager._register_to_bootstrap(self)
  CommonKVReceiver.__init__(self,mgr,bootstrap_addr,bootstrap_room,data_parallel_rank)
  CommonKVReceiver._connect(cls,endpoint,is_ipv6)
  CommonKVReceiver._connect_to_bootstrap_server(cls,bootstrap_info)
  CommonKVReceiver._get_bootstrap_info_from_server(self,engine_rank,target_dp_group)
  CommonKVReceiver._get_prefill_dp_size_from_server(self)
  CommonKVReceiver._register_kv_args(self)
  CommonKVReceiver.failure_exception(self)
  async CommonKVBootstrapServer._handle_route(self,request)
  async CommonKVBootstrapServer._handle_route_get(self,request)
  async CommonKVBootstrapServer._handle_route_put(self,request)
disaggregation/common/utils.py:
  FastQueue.__init__(self)
  FastQueue.get(self)
  FastQueue.put(self,item)
  group_concurrent_contiguous(src_indices,dst_indices)
disaggregation/decode.py:
  DecodePreallocQueue.__init__(self,req_to_token_pool,token_to_kv_pool_allocator,draft_token_to_kv_pool,req_to_metadata_buffer_idx_allocator,metadata_buffers,scheduler,transfer_queue,tree_cache,gloo_group,tp_rank,tp_size,dp_size,gpu_id,bootstrap_port,max_total_num_tokens,prefill_pp_size,num_reserved_decode_tokens,transfer_backend)
  DecodePreallocQueue._allocatable_tokens(self,retractable_tokens,count_retracted)
  DecodePreallocQueue._check_if_req_exceed_kv_capacity(self,req)
  DecodePreallocQueue._init_kv_manager(self)
  DecodePreallocQueue._pre_alloc(self,req)
  DecodePreallocQueue._update_handshake_waiters(self)
  DecodePreallocQueue.add(self,req,is_retracted)
  DecodePreallocQueue.extend(self,reqs,is_retracted)
  DecodePreallocQueue.num_tokens_pre_allocated(self)
  DecodePreallocQueue.pop_preallocated(self)
  DecodePreallocQueue.resume_retracted_reqs(self)
  DecodeReqToTokenPool.__init__(self,size,max_context_len,device,enable_memory_saver,pre_alloc_size)
  DecodeReqToTokenPool.alloc(self,need_size)
  DecodeReqToTokenPool.available_size(self)
  DecodeReqToTokenPool.clear(self)
  DecodeReqToTokenPool.free(self,free_index)
  DecodeReqToTokenPool.write(self,indices,values)
  DecodeTransferQueue.__init__(self,gloo_group,req_to_metadata_buffer_idx_allocator,tp_rank,metadata_buffers,scheduler,tree_cache)
  DecodeTransferQueue.add(self,decode_req)
  DecodeTransferQueue.extend(self,decode_reqs)
  DecodeTransferQueue.pop_transferred(self)
  SchedulerDisaggregationDecodeMixin._prepare_idle_batch_and_run(self,batch,delay_process)
  SchedulerDisaggregationDecodeMixin.event_loop_normal_disagg_decode(self)
  SchedulerDisaggregationDecodeMixin.event_loop_overlap_disagg_decode(self)
  SchedulerDisaggregationDecodeMixin.get_new_prebuilt_batch(self)
  SchedulerDisaggregationDecodeMixin.get_next_disagg_decode_batch_to_run(self)
  SchedulerDisaggregationDecodeMixin.process_decode_queue(self)
disaggregation/decode_schedule_batch_mixin.py:
  ScheduleBatchDisaggregationDecodeMixin.prepare_for_prebuilt_extend(self)
  ScheduleBatchDisaggregationDecodeMixin.process_prebuilt_extend(self,server_args,model_config)
disaggregation/fake/conn.py:
  FakeKVReceiver.__init__(self,mgr,bootstrap_addr,bootstrap_room,data_parallel_rank)
  FakeKVReceiver.failure_exception(self)
  FakeKVReceiver.init(self,kv_indices,aux_index)
  FakeKVReceiver.poll(self)
  FakeKVSender.__init__(self,mgr,bootstrap_addr,bootstrap_room,dest_tp_ranks,pp_rank)
  FakeKVSender.failure_exception(self)
  FakeKVSender.init(self,kv_indices,aux_index)
  FakeKVSender.poll(self)
  FakeKVSender.send(self,kv_indices)
disaggregation/kv_events.py:
  EventPublisher.__init__(self,attn_dp_rank)
  EventPublisher.publish(self,events)
  EventPublisher.shutdown(self)
  EventPublisherFactory.create(cls,config,attn_dp_rank)
  EventPublisherFactory.register_publisher(cls,name,ctor)
  KVEventsConfig.from_cli(cls,cli_value)
  NullEventPublisher.publish(self,events)
  NullEventPublisher.shutdown(self)
  ZmqEventPublisher.__init__(self,attn_dp_rank,endpoint,replay_endpoint,buffer_steps,hwm,max_queue_size,topic)
  ZmqEventPublisher._publisher_thread(self)
  ZmqEventPublisher._service_replay(self)
  ZmqEventPublisher._socket_setup(self)
  ZmqEventPublisher.offset_endpoint_port(endpoint,data_parallel_rank)
  ZmqEventPublisher.publish(self,events)
  ZmqEventPublisher.shutdown(self)
disaggregation/launch_lb.py:
  LBArgs.add_cli_args(parser)
  LBArgs.from_cli_args(cls,args)
  main()
disaggregation/mini_lb.py:
  MiniLoadBalancer.__init__(self,prefill_configs,decode_servers,timeout)
  MiniLoadBalancer.add_decode_server(self,new_decode_server)
  MiniLoadBalancer.add_prefill_server(self,new_prefill_config)
  MiniLoadBalancer.select_pair(self)
  _generate_bootstrap_room()
  _get_request_batch_size(request)
  async MiniLoadBalancer.generate(self,modified_request,prefill_server,decode_server,endpoint)
  async MiniLoadBalancer.generate_stream(self,modified_request,prefill_server,decode_server,endpoint)
  async MiniLoadBalancer.stream_results()
  async _forward_to_backend(request_data,endpoint_name)
  async flush_cache()
  async get_model_info()
  async get_models()
  async get_server_info()
  async handle_chat_completion_request(request_data)
  async handle_completion_request(request_data)
  async handle_generate_request(request_data)
  async health_check()
  async health_check()
  async register(obj)
  run(prefill_configs,decode_addrs,host,port,timeout)
  setup_logger()
disaggregation/mooncake/conn.py:
  AuxDataCodec.deserialize_data_to_buffer(kv_args,buffer_index,aux_index,data)
  AuxDataCodec.serialize_data_from_buffer(src_addr,data_length)
  KVArgsRegisterInfo.from_zmq(cls,msg)
  KVTransferError.__init__(self,bootstrap_room,failure_reason)
  KVTransferError.__str__(self)
  MooncakeKVBootstrapServer.__init__(self,port)
  MooncakeKVBootstrapServer._run_server(self)
  MooncakeKVBootstrapServer._setup_routes(self)
  MooncakeKVBootstrapServer.close(self)
  MooncakeKVBootstrapServer.poll(self)
  MooncakeKVBootstrapServer.run(self)
  MooncakeKVManager.__init__(self,args,disaggregation_mode,server_args,is_mla_backend)
  MooncakeKVManager._bind_server_socket(self)
  MooncakeKVManager._connect(self,endpoint,is_ipv6)
  MooncakeKVManager._handle_aux_data(self,msg)
  MooncakeKVManager._handle_node_failure(self,failed_bootstrap_addr)
  MooncakeKVManager._register_to_bootstrap(self)
  MooncakeKVManager._transfer_data(self,mooncake_session_id,transfer_blocks)
  MooncakeKVManager.add_transfer_request(self,bootstrap_room,kv_indices,index_slice,is_last,aux_index)
  MooncakeKVManager.bootstrap_thread()
  MooncakeKVManager.check_status(self,bootstrap_room)
  MooncakeKVManager.decode_thread()
  MooncakeKVManager.get_session_id(self)
  MooncakeKVManager.heartbeat_checker()
  MooncakeKVManager.init_engine(self)
  MooncakeKVManager.process_layer(src_ptr,dst_ptr,item_len)
  MooncakeKVManager.process_layer_tp_aware(layer_params)
  MooncakeKVManager.process_layers(layers_params)
  MooncakeKVManager.record_failure(self,bootstrap_room,failure_reason)
  MooncakeKVManager.register_buffer_to_engine(self)
  MooncakeKVManager.send_aux(self,req,prefill_aux_index,dst_aux_ptrs)
  MooncakeKVManager.send_aux_data_to_endpoint(self,remote,dst_port,room,buffer_index,aux_index,data)
  MooncakeKVManager.send_aux_tcp(self,req,prefill_aux_index,dst_aux_ptrs)
  MooncakeKVManager.send_kvcache(self,mooncake_session_id,prefill_kv_indices,dst_kv_ptrs,dst_kv_indices,executor)
  MooncakeKVManager.send_kvcache_slice(self,mooncake_session_id,prefill_kv_indices,dst_kv_ptrs,dst_kv_indices,dst_tp_rank,dst_attn_tp_size,dst_kv_item_len,executor)
  MooncakeKVManager.set_transfer_blocks(src_ptr,dst_ptr,item_len)
  MooncakeKVManager.start_decode_thread(self)
  MooncakeKVManager.start_prefill_thread(self)
  MooncakeKVManager.sync_status_to_decode_endpoint(self,remote,dst_port,room,status,prefill_rank)
  MooncakeKVManager.transfer_worker(self,queue,executor)
  MooncakeKVManager.update_status(self,bootstrap_room,status)
  MooncakeKVReceiver.__init__(self,mgr,bootstrap_addr,bootstrap_room,data_parallel_rank)
  MooncakeKVReceiver._connect(cls,endpoint,is_ipv6)
  MooncakeKVReceiver._connect_to_bootstrap_server(cls,bootstrap_info)
  MooncakeKVReceiver._get_bootstrap_info_from_server(self,engine_rank,target_dp_group,target_pp_rank)
  MooncakeKVReceiver._get_prefill_parallel_info_from_server(self)
  MooncakeKVReceiver._register_kv_args(self)
  MooncakeKVReceiver.abort(self)
  MooncakeKVReceiver.clear(self)
  MooncakeKVReceiver.failure_exception(self)
  MooncakeKVReceiver.init(self,kv_indices,aux_index)
  MooncakeKVReceiver.poll(self)
  MooncakeKVSender.__init__(self,mgr,bootstrap_addr,bootstrap_room,dest_tp_ranks,pp_rank)
  MooncakeKVSender.abort(self)
  MooncakeKVSender.clear(self)
  MooncakeKVSender.failure_exception(self)
  MooncakeKVSender.init(self,num_kv_indices,aux_index)
  MooncakeKVSender.poll(self)
  MooncakeKVSender.send(self,kv_indices)
  TransferInfo.from_zmq(cls,msg)
  async MooncakeKVBootstrapServer._handle_health_check(self,request)
  async MooncakeKVBootstrapServer._handle_route(self,request)
  async MooncakeKVBootstrapServer._handle_route_get(self,request)
  async MooncakeKVBootstrapServer._handle_route_put(self,request)
disaggregation/mooncake/transfer_engine.py:
  MooncakeTransferEngine.__init__(self,hostname,gpu_id,ib_device)
  MooncakeTransferEngine.batch_deregister(self,ptrs)
  MooncakeTransferEngine.batch_register(self,ptrs,lengths)
  MooncakeTransferEngine.batch_transfer_sync(self,session_id,buffers,peer_buffer_addresses,lengths)
  MooncakeTransferEngine.deregister(self,ptr)
  MooncakeTransferEngine.get_session_id(self)
  MooncakeTransferEngine.initialize(self,hostname,device_name)
  MooncakeTransferEngine.register(self,ptr,length)
  MooncakeTransferEngine.transfer_sync(self,session_id,buffer,peer_buffer_address,length)
disaggregation/nixl/conn.py:
  KVArgsRegisterInfo.from_zmq(cls,msg)
  NixlKVManager.__init__(self,args,disaggregation_mode,server_args,is_mla_backend)
  NixlKVManager._add_remote_peer(self,decode_kv_args)
  NixlKVManager._bind_server_socket(self)
  NixlKVManager._start_bootstrap_thread(self)
  NixlKVManager.add_transfer_request(self,bootstrap_room,kv_indices,index_slice,is_last,chunk_id,aux_index)
  NixlKVManager.bootstrap_thread()
  NixlKVManager.check_status(self,bootstrap_room)
  NixlKVManager.check_transfer_done(self,room)
  NixlKVManager.register_buffer_to_engine(self)
  NixlKVManager.send_aux(self,peer_name,prefill_aux_index,dst_aux_ptrs,dst_aux_index,notif)
  NixlKVManager.send_kvcache(self,peer_name,prefill_kv_indices,dst_kv_ptrs,dst_kv_indices,dst_gpu_id,notif)
  NixlKVManager.update_status(self,bootstrap_room,status)
  NixlKVManager.update_transfer_status(self)
  NixlKVReceiver.__init__(self,mgr,bootstrap_addr,bootstrap_room,data_parallel_rank)
  NixlKVReceiver._register_kv_args(self)
  NixlKVReceiver.failure_exception(self)
  NixlKVReceiver.init(self,kv_indices,aux_index)
  NixlKVReceiver.poll(self)
  NixlKVSender.__init__(self,mgr,bootstrap_addr,bootstrap_room,dest_tp_ranks,pp_rank)
  NixlKVSender.failure_exception(self)
  NixlKVSender.init(self,num_kv_indices,aux_index)
  NixlKVSender.poll(self)
  NixlKVSender.send(self,kv_indices)
  TransferInfo.from_zmq(cls,msg)
  TransferInfo.is_dummy(self)
  TransferStatus.is_done(self)
disaggregation/prefill.py:
  PrefillBootstrapQueue.__init__(self,token_to_kv_pool,draft_token_to_kv_pool,req_to_metadata_buffer_idx_allocator,metadata_buffers,tp_rank,tp_size,gpu_id,bootstrap_port,gloo_group,max_total_num_tokens,decode_tp_size,decode_dp_size,scheduler,pp_rank,pp_size,transfer_backend)
  PrefillBootstrapQueue._check_if_req_exceed_kv_capacity(self,req)
  PrefillBootstrapQueue._init_kv_manager(self)
  PrefillBootstrapQueue._process_req(self,req)
  PrefillBootstrapQueue.add(self,req,num_kv_heads)
  PrefillBootstrapQueue.extend(self,reqs,num_kv_heads)
  PrefillBootstrapQueue.pop_bootstrapped(self,return_failed_reqs,rids_to_check)
  SchedulerDisaggregationPrefillMixin.event_loop_normal_disagg_prefill(self)
  SchedulerDisaggregationPrefillMixin.event_loop_overlap_disagg_prefill(self)
  SchedulerDisaggregationPrefillMixin.event_loop_pp_disagg_prefill(self)
  SchedulerDisaggregationPrefillMixin.get_transferred_rids(self)
  SchedulerDisaggregationPrefillMixin.process_batch_result_disagg_prefill(self,batch,result,launch_done)
  SchedulerDisaggregationPrefillMixin.process_disagg_prefill_inflight_queue(self,rids_to_check)
  SchedulerDisaggregationPrefillMixin.process_prefill_chunk(self)
  SchedulerDisaggregationPrefillMixin.recv_pyobj_from_prev_stage(self)
  SchedulerDisaggregationPrefillMixin.send_kv_chunk(self,req,last_chunk,end_idx)
  SchedulerDisaggregationPrefillMixin.send_pyobj_to_next_stage(self,data)
disaggregation/utils.py:
  MetadataBuffers.__init__(self,size,hidden_size,dtype,max_top_logprobs_num,custom_mem_pool)
  MetadataBuffers.get_buf(self,idx)
  MetadataBuffers.get_buf_infos(self)
  MetadataBuffers.set_buf(self,req)
  PDRegistryRequest.__post_init__(self)
  ReqToMetadataIdxAllocator.__init__(self,size)
  ReqToMetadataIdxAllocator.alloc(self)
  ReqToMetadataIdxAllocator.available_size(self)
  ReqToMetadataIdxAllocator.free(self,free_index)
  get_kv_class(transfer_backend,class_type)
  is_mla_backend(target_kv_pool)
  kv_to_page_indices(kv_indices,page_size)
  kv_to_page_num(num_kv_indices,page_size)
  poll_and_all_reduce(pollers,gloo_group)
  prepare_abort(req,error_message,status_code)
  register_disaggregation_server(mode,server_port,bootstrap_port,pdlb_url)
