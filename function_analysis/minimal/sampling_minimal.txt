sampling/custom_logit_processor.py:
  CustomLogitProcessor.__call__(self,logits,custom_param_list)
  CustomLogitProcessor.from_str(cls,json_str)
  CustomLogitProcessor.to_str(cls)
  DisallowedTokensLogitsProcessor.__call__(self,logits,custom_param_list)
  _cache_from_str(json_str)
sampling/penaltylib/frequency_penalty.py:
  BatchedFrequencyPenalizer.__init__(self,orchestrator)
  BatchedFrequencyPenalizer._apply(self,logits)
  BatchedFrequencyPenalizer._cumulate_output_tokens(self,output_ids)
  BatchedFrequencyPenalizer._filter(self,keep_indices)
  BatchedFrequencyPenalizer._is_required(self)
  BatchedFrequencyPenalizer._merge(self,their)
  BatchedFrequencyPenalizer._prepare(self)
sampling/penaltylib/min_new_tokens.py:
  BatchedMinNewTokensPenalizer.__init__(self,orchestrator)
  BatchedMinNewTokensPenalizer._apply(self,logits)
  BatchedMinNewTokensPenalizer._cumulate_output_tokens(self,output_ids)
  BatchedMinNewTokensPenalizer._filter(self,keep_indices)
  BatchedMinNewTokensPenalizer._is_required(self)
  BatchedMinNewTokensPenalizer._merge(self,their)
  BatchedMinNewTokensPenalizer._prepare(self)
sampling/penaltylib/orchestrator.py:
  BatchedPenalizerOrchestrator.__init__(self,vocab_size,batch,penalizers)
  BatchedPenalizerOrchestrator.apply(self,logits)
  BatchedPenalizerOrchestrator.batch(self)
  BatchedPenalizerOrchestrator.batch(self,value)
  BatchedPenalizerOrchestrator.cumulate_output_tokens(self,output_ids)
  BatchedPenalizerOrchestrator.filter(self,keep_indices)
  BatchedPenalizerOrchestrator.merge(self,their)
  BatchedPenalizerOrchestrator.reqs(self)
  _BatchedPenalizer._apply(self,logits)
  _BatchedPenalizer._cumulate_output_tokens(self,output_ids)
  _BatchedPenalizer._filter(self,keep_indices)
  _BatchedPenalizer._is_required(self)
  _BatchedPenalizer._merge(self,their)
  _BatchedPenalizer._prepare(self)
  _BatchedPenalizer.apply(self,logits)
  _BatchedPenalizer.cumulate_output_tokens(self,output_ids)
  _BatchedPenalizer.filter(self,keep_indices)
  _BatchedPenalizer.is_prepared(self)
  _BatchedPenalizer.is_required(self)
  _BatchedPenalizer.merge(self,their)
  _BatchedPenalizer.prepare(self)
  _BatchedPenalizer.prepare_if_required(self)
  _BatchedPenalizer.teardown(self)
sampling/penaltylib/presence_penalty.py:
  BatchedPresencePenalizer.__init__(self,orchestrator)
  BatchedPresencePenalizer._apply(self,logits)
  BatchedPresencePenalizer._cumulate_output_tokens(self,output_ids)
  BatchedPresencePenalizer._filter(self,keep_indices)
  BatchedPresencePenalizer._is_required(self)
  BatchedPresencePenalizer._merge(self,their)
  BatchedPresencePenalizer._prepare(self)
sampling/sampling_batch_info.py:
  SamplingBatchInfo.__len__(self)
  SamplingBatchInfo._filter_batch_custom_logit_processor(self,keep_indices,keep_indices_device)
  SamplingBatchInfo.apply_logits_bias(self,logits)
  SamplingBatchInfo.filter_batch(self,keep_indices,keep_indices_device)
  SamplingBatchInfo.from_schedule_batch(cls,batch,vocab_size)
  SamplingBatchInfo.merge_batch(self,other)
  SamplingBatchInfo.merge_custom_logit_processor(lhs,rhs,bs1,bs2,device)
  SamplingBatchInfo.update_penalties(self)
  SamplingBatchInfo.update_regex_vocab_mask(self)
  merge_bias_tensor(lhs,rhs,bs1,bs2,device,default)
sampling/sampling_params.py:
  SamplingParams.__init__(self,max_new_tokens,stop,stop_token_ids,temperature,top_p,top_k,min_p,frequency_penalty,presence_penalty,repetition_penalty,min_new_tokens,n,json_schema,regex,ebnf,structural_tag,ignore_eos,skip_special_tokens,spaces_between_special_tokens,no_stop_trim,custom_params,stream_interval,logit_bias)
  SamplingParams.normalize(self,tokenizer)
  SamplingParams.verify(self,vocab_size)
