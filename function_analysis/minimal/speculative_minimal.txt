speculative/build_eagle_tree.py:
  build_tree_kernel_efficient(verified_id,score_list,token_list,parents_list,seq_lens,seq_lens_sum,topk,spec_steps,num_verify_tokens,tree_mask_mode,tree_mask_buf,position_buf)
  build_tree_kernel_efficient_preprocess(verified_id,score_list,token_list,parents_list,num_verify_tokens)
  test_build_tree_kernel_efficient()
speculative/eagle_draft_cuda_graph_runner.py:
  EAGLEDraftCudaGraphRunner.__init__(self,eagle_worker)
  EAGLEDraftCudaGraphRunner._postprocess_output_to_raw_bs(self,out,raw_bs)
  EAGLEDraftCudaGraphRunner.can_run(self,forward_batch)
  EAGLEDraftCudaGraphRunner.capture(self)
  EAGLEDraftCudaGraphRunner.capture_one_batch_size(self,num_seqs,forward)
  EAGLEDraftCudaGraphRunner.replay(self,forward_batch)
  EAGLEDraftCudaGraphRunner.run_once()
speculative/eagle_draft_extend_cuda_graph_runner.py:
  EAGLEDraftExtendCudaGraphRunner.__init__(self,eagle_worker)
  EAGLEDraftExtendCudaGraphRunner.can_run(self,forward_batch)
  EAGLEDraftExtendCudaGraphRunner.capture(self)
  EAGLEDraftExtendCudaGraphRunner.capture_one_batch_size(self,bs,forward)
  EAGLEDraftExtendCudaGraphRunner.replay(self,forward_batch)
  EAGLEDraftExtendCudaGraphRunner.run_once()
speculative/eagle_utils.py:
  EagleDraftInput.create_idle_input(cls,device,hidden_size,dtype,topk,capture_hidden_mode)
  EagleDraftInput.filter_batch(self,new_indices,has_been_filtered)
  EagleDraftInput.generate_attn_arg_prefill(self,req_pool_indices,paged_kernel_lens,paged_kernel_lens_sum,req_to_token)
  EagleDraftInput.merge_batch(self,spec_info)
  EagleDraftInput.prepare_extend_after_decode(self,batch,speculative_num_steps)
  EagleDraftInput.prepare_for_extend(self,batch)
  EagleVerifyInput.create_idle_input(cls,topk,spec_steps,num_verify_tokens)
  EagleVerifyInput.generate_attn_arg_prefill(self,req_pool_indices,paged_kernel_lens,paged_kernel_lens_sum,req_to_token)
  EagleVerifyInput.prepare_for_verify(self,batch,page_size)
  EagleVerifyInput.verify(self,batch,logits_output,token_to_kv_pool_allocator,page_size,vocab_mask)
  _generate_simulated_accept_index(accept_index,predict,accept_length,simulate_acc_len,bs,spec_steps)
  align_evict_mask_to_page_size(seq_lens,evict_mask,page_size,num_draft_tokens,BLOCK_SIZE)
  assign_draft_cache_locs(req_pool_indices,req_to_token,seq_lens,extend_lens,num_new_pages_per_topk,out_cache_loc,pool_len,topk,speculative_num_steps,page_size,bs_upper,iter_upper)
  assign_req_to_token_pool(req_pool_indices,req_to_token,start_offset,end_offset,out_cache_loc,pool_len,bs_upper)
  create_accept_length_filter(accept_length,unfinished_index_device,seq_lens)
  create_extend_after_decode_spec_info(verified_id,seq_lens,accept_lens,positions,new_verified_id,bs_upper)
  dfs(curr,retrieve_next_token,retrieve_next_sibling,parent_pos)
  filter_finished_cache_loc_kernel(out_cache_loc,tgt_cache_loc,accept_length,accept_length_filter,bs_upper,num_verify_tokens_upper)
  generate_draft_decode_kv_indices(req_pool_indices,req_to_token,paged_kernel_lens,kv_indices,kv_indptr,positions,pool_len,kv_indices_stride,kv_indptr_stride,bs_upper,iter_upper,num_tokens_upper,page_size)
  generate_token_bitmask(reqs,verify_input,retrieve_next_token_cpu,retrieve_next_sibling_cpu,draft_tokens_cpu,vocab_size)
  get_src_tgt_cache_loc(seq_lens,out_cache_loc,accept_index,accept_length,draft_token_num,page_size)
  get_target_cache_loc(tgt_cache_loc,to_free_slots,accept_length,to_free_num_slots,out_cache_loc,num_verify_tokens,num_verify_tokens_upper,bs_upper)
  select_top_k_tokens(i,topk_p,topk_index,hidden_states,scores,topk)
  traverse_tree(retrieve_next_token,retrieve_next_sibling,draft_tokens,grammar,allocate_token_bitmask)
speculative/eagle_worker.py:
  EAGLEWorker.__init__(self,server_args,gpu_id,tp_rank,dp_rank,moe_ep_rank,nccl_port,target_worker)
  EAGLEWorker._detect_nan_if_needed(self,logits_output)
  EAGLEWorker._draft_preprocess_decode(self,batch)
  EAGLEWorker._draft_preprocess_idle(self,batch)
  EAGLEWorker.add_logprob_values(self,batch,res,logits_output)
  EAGLEWorker.capture_for_decode(self,logits_output,draft_input)
  EAGLEWorker.check_forward_draft_extend_after_decode(self,batch)
  EAGLEWorker.draft(self,batch)
  EAGLEWorker.draft_forward(self,forward_batch)
  EAGLEWorker.draft_model_runner(self)
  EAGLEWorker.forward_batch_speculative_generation(self,batch)
  EAGLEWorker.forward_draft_extend(self,batch,hidden_states,next_token_ids,seq_lens_cpu)
  EAGLEWorker.forward_draft_extend_after_decode(self,batch)
  EAGLEWorker.forward_target_extend(self,batch)
  EAGLEWorker.init_attention_backend(self)
  EAGLEWorker.init_cuda_graphs(self)
  EAGLEWorker.verify(self,batch,spec_info)
  draft_tp_context(tp_group)
  get_last_loc_large_page_size_large_top_k(req_to_token,req_pool_indices,seq_lens,speculative_num_steps,topk,page_size)
  get_last_loc_large_page_size_top_k_1(req_to_token,req_pool_indices,seq_lens,speculative_num_steps)
  load_token_map(token_map_path)
speculative/spec_info.py:
  SpeculativeAlgorithm.from_string(name)
  SpeculativeAlgorithm.is_eagle(self)
  SpeculativeAlgorithm.is_eagle3(self)
  SpeculativeAlgorithm.is_none(self)
