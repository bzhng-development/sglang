mem_cache/allocator.py:
  BaseTokenToKVPoolAllocator.__init__(self,size,page_size,dtype,device,kvcache,need_sort)
  BaseTokenToKVPoolAllocator.alloc(self,need_size)
  BaseTokenToKVPoolAllocator.alloc_decode(self,*args,**kwargs)
  BaseTokenToKVPoolAllocator.alloc_extend(self,*args,**kwargs)
  BaseTokenToKVPoolAllocator.available_size(self)
  BaseTokenToKVPoolAllocator.backup_state(self)
  BaseTokenToKVPoolAllocator.clear(self)
  BaseTokenToKVPoolAllocator.debug_print(self)
  BaseTokenToKVPoolAllocator.free(self,free_index)
  BaseTokenToKVPoolAllocator.free_group_begin(self)
  BaseTokenToKVPoolAllocator.free_group_end(self)
  BaseTokenToKVPoolAllocator.get_cpu_copy(self,*args,**kwargs)
  BaseTokenToKVPoolAllocator.get_kvcache(self)
  BaseTokenToKVPoolAllocator.load_cpu_copy(self,*args,**kwargs)
  BaseTokenToKVPoolAllocator.merge_and_sort_free(self)
  BaseTokenToKVPoolAllocator.restore_state(self,state)
  PagedTokenToKVPoolAllocator.__init__(self,size,page_size,dtype,device,kvcache,need_sort)
  PagedTokenToKVPoolAllocator.alloc(self,need_size)
  PagedTokenToKVPoolAllocator.alloc_decode(self,seq_lens,last_loc)
  PagedTokenToKVPoolAllocator.alloc_extend(self,prefix_lens,seq_lens,last_loc,extend_num_tokens)
  PagedTokenToKVPoolAllocator.clear(self)
  PagedTokenToKVPoolAllocator.free(self,free_index)
  PagedTokenToKVPoolAllocator.get_cpu_copy(self,indices)
  PagedTokenToKVPoolAllocator.load_cpu_copy(self,kv_cache_cpu,indices)
  SWATokenToKVPoolAllocator.__init__(self,size,size_swa,dtype,device,kvcache,need_sort)
  SWATokenToKVPoolAllocator.alloc(self,need_size)
  SWATokenToKVPoolAllocator.available_size(self)
  SWATokenToKVPoolAllocator.backup_state(self)
  SWATokenToKVPoolAllocator.clear(self)
  SWATokenToKVPoolAllocator.debug_print(self)
  SWATokenToKVPoolAllocator.free(self,free_index)
  SWATokenToKVPoolAllocator.free_swa(self,free_index)
  SWATokenToKVPoolAllocator.full_available_size(self)
  SWATokenToKVPoolAllocator.get_kvcache(self)
  SWATokenToKVPoolAllocator.restore_state(self,state)
  SWATokenToKVPoolAllocator.size_full(self)
  SWATokenToKVPoolAllocator.size_swa(self)
  SWATokenToKVPoolAllocator.swa_available_size(self)
  SWATokenToKVPoolAllocator.translate_loc_from_full_to_swa(self,kv_indices)
  TokenToKVPoolAllocator.__init__(self,size,dtype,device,kvcache,need_sort)
  TokenToKVPoolAllocator.alloc(self,need_size)
  TokenToKVPoolAllocator.available_size(self)
  TokenToKVPoolAllocator.clear(self)
  TokenToKVPoolAllocator.free(self,free_index)
  TokenToKVPoolAllocator.get_cpu_copy(self,indices)
  TokenToKVPoolAllocator.load_cpu_copy(self,kv_cache_cpu,indices)
  alloc_decode_kernel(seq_lens_ptr,last_loc_ptr,free_page_ptr,out_indices,ret_values,bs_upper,page_size)
  alloc_extend_kernel(pre_lens_ptr,seq_lens_ptr,last_loc_ptr,free_page_ptr,out_indices,ret_values,bs_upper,page_size,max_num_extend_tokens)
mem_cache/allocator_ascend.py:
  AscendPagedTokenToKVPoolAllocator.alloc_decode(self,seq_lens,last_loc)
  AscendPagedTokenToKVPoolAllocator.alloc_extend(self,prefix_lens,seq_lens,last_loc,extend_num_tokens)
  alloc_extend_kernel_ascend(prefix_lens,seq_lens,last_loc,free_pages,out_indices,page_size,device)
mem_cache/base_prefix_cache.py:
  BasePrefixCache.cache_finished_req(self,req,**kwargs)
  BasePrefixCache.cache_unfinished_req(self,req,**kwargs)
  BasePrefixCache.check_hicache_events(self)
  BasePrefixCache.dec_lock_ref(self,node,swa_uuid_for_lock)
  BasePrefixCache.evict(self,num_tokens)
  BasePrefixCache.evictable_size(self)
  BasePrefixCache.full_evictable_size(self)
  BasePrefixCache.full_protected_size(self)
  BasePrefixCache.inc_lock_ref(self,node)
  BasePrefixCache.init_load_back(self,last_host_node,host_hit_length)
  BasePrefixCache.match_prefix(self,key,**kwargs)
  BasePrefixCache.pretty_print(self)
  BasePrefixCache.protected_size(self)
  BasePrefixCache.ready_to_load_host_cache(self)
  BasePrefixCache.reset(self)
  BasePrefixCache.swa_evictable_size(self)
  BasePrefixCache.swa_protected_size(self)
  BasePrefixCache.take_events(self)
  BasePrefixCache.total_size(self)
mem_cache/chunk_cache.py:
  ChunkCache.__init__(self,req_to_token_pool,token_to_kv_pool_allocator,page_size)
  ChunkCache.cache_finished_req(self,req)
  ChunkCache.cache_unfinished_req(self,req,chunked)
  ChunkCache.dec_lock_ref(self,node,swa_uuid_for_lock)
  ChunkCache.evict(self,num_tokens)
  ChunkCache.inc_lock_ref(self,node)
  ChunkCache.match_prefix(self,**unused_kwargs)
  ChunkCache.pretty_print(self)
  ChunkCache.reset(self)
  SWAChunkCache.__init__(self,req_to_token_pool,token_to_kv_pool_allocator,page_size)
  SWAChunkCache.evict(self,num_tokens)
  SWAChunkCache.evict_swa(self,req,prelen,attention_chunk_size)
mem_cache/cpp_radix_tree/radix_tree.py:
  RadixTreeCpp.__init__(self,disabled,host_size,page_size,write_through_threshold)
  RadixTreeCpp.commit_loading_onboard(self,handle,success)
  RadixTreeCpp.commit_writing_through(self,handle,success)
  RadixTreeCpp.debug_print(self)
  RadixTreeCpp.evict(self,num_tokens)
  RadixTreeCpp.evictable_size(self)
  RadixTreeCpp.loading_onboard(self,host_node,new_device_indices)
  RadixTreeCpp.lock_ref(self,handle,lock)
  RadixTreeCpp.match_prefix(self,prefix)
  RadixTreeCpp.protected_size(self)
  RadixTreeCpp.reset(self)
  RadixTreeCpp.total_size(self)
  RadixTreeCpp.writing_through(self,key,indices)
mem_cache/hicache_storage.py:
  HiCacheFile.__init__(self,storage_config,file_path)
  HiCacheFile._get_suffixed_key(self,key)
  HiCacheFile.batch_get(self,keys,target_locations,target_sizes)
  HiCacheFile.batch_set(self,keys,values,target_locations,target_sizes)
  HiCacheFile.clear(self)
  HiCacheFile.delete(self,key)
  HiCacheFile.exists(self,key)
  HiCacheFile.get(self,key,target_location,target_sizes)
  HiCacheFile.set(self,key,value,target_location,target_sizes)
  HiCacheStorage.batch_exists(self,keys)
  HiCacheStorage.batch_get(self,keys,target_locations,target_sizes)
  HiCacheStorage.batch_set(self,keys,values,target_locations,target_sizes)
  HiCacheStorage.clear(self)
  HiCacheStorage.delete(self,key)
  HiCacheStorage.exists(self,key)
  HiCacheStorage.get(self,key,target_location,target_sizes)
  HiCacheStorage.set(self,key,value,target_location,target_sizes)
  get_hash_str(token_ids,prior_hash)
mem_cache/hiradix_cache.py:
  HiRadixCache.__init__(self,req_to_token_pool,token_to_kv_pool_allocator,tp_cache_group,page_size,hicache_ratio,hicache_size,hicache_write_policy,hicache_io_backend,hicache_mem_layout,hicache_storage_backend,hicache_storage_prefetch_policy,model_name,storage_backend_extra_config)
  HiRadixCache._collect_leaves_device(self)
  HiRadixCache._evict_backuped(self,node)
  HiRadixCache._evict_regular(self,node)
  HiRadixCache._inc_hit_count(self,node,chunked)
  HiRadixCache._insert_helper_host(self,node,key,host_value,hash_value)
  HiRadixCache._match_prefix_helper(self,node,key)
  HiRadixCache._split_node(self,key,child,split_len)
  HiRadixCache.can_terminate_prefetch(self,operation)
  HiRadixCache.check_backup_progress(self)
  HiRadixCache.check_hicache_events(self)
  HiRadixCache.check_prefetch_progress(self,req_id)
  HiRadixCache.check_revoked_prefetch(self)
  HiRadixCache.clear_storage_backend(self)
  HiRadixCache.evict(self,num_tokens)
  HiRadixCache.evict_host(self,num_tokens)
  HiRadixCache.evictable_size(self)
  HiRadixCache.get_height(self,node)
  HiRadixCache.init_load_back(self,last_node,host_hit_length,mem_quota)
  HiRadixCache.insert(self,key,value,chunked)
  HiRadixCache.is_leaf(node)
  HiRadixCache.load_back(self,node,mem_quota)
  HiRadixCache.loading_check(self)
  HiRadixCache.match_prefix(self,key,**kwargs)
  HiRadixCache.prefetch_from_storage(self,req_id,last_host_node,new_input_tokens,last_hash)
  HiRadixCache.ready_to_load_host_cache(self)
  HiRadixCache.reset(self)
  HiRadixCache.write_backup(self,node,write_back)
  HiRadixCache.write_backup_storage(self,node)
  HiRadixCache.writing_check(self,write_back)
mem_cache/lora_radix_cache.py:
  LoRAKey.__init__(self,lora_id,token_ids)
  LoRAKey.__len__(self)
  LoRARadixCache.__init__(self,req_to_token_pool,token_to_kv_pool_allocator,page_size,disable)
  LoRARadixCache._collect_leaves(self)
  LoRARadixCache._delete_leaf(self,node)
  LoRARadixCache._dfs_helper(node)
  LoRARadixCache._insert_helper(self,node,key,value)
  LoRARadixCache._match_prefix_helper(self,node,key)
  LoRARadixCache._print_helper(self,node,indent)
  LoRARadixCache._split_node(self,key,child,split_len)
  LoRARadixCache._total_size_helper(self)
  LoRARadixCache.all_values_flatten(self)
  LoRARadixCache.cache_finished_req(self,req)
  LoRARadixCache.cache_unfinished_req(self,req,chunked)
  LoRARadixCache.dec_lock_ref(self,node)
  LoRARadixCache.evict(self,num_tokens)
  LoRARadixCache.evictable_size(self)
  LoRARadixCache.inc_lock_ref(self,node)
  LoRARadixCache.insert(self,key,value)
  LoRARadixCache.match_prefix(self,key,**kwargs)
  LoRARadixCache.match_prefix_with_lora_id(self,key,**kwargs)
  LoRARadixCache.pretty_print(self)
  LoRARadixCache.protected_size(self)
  LoRARadixCache.reset(self)
  LoRARadixCache.total_size(self)
  LoRATreeNode.__init__(self,id)
  LoRATreeNode.__lt__(self,other)
  LoRATreeNode.evicted(self)
  _key_match(key0,key1)
  get_child_key(key)
mem_cache/memory_pool.py:
  AscendMLAPagedTokenToKVPool.__init__(self,size,page_size,dtype,kv_lora_rank,qk_rope_head_dim,layer_num,device,enable_memory_saver,start_layer,end_layer)
  AscendMLAPagedTokenToKVPool.get_contiguous_buf_infos(self)
  AscendMLAPagedTokenToKVPool.get_key_buffer(self,layer_id)
  AscendMLAPagedTokenToKVPool.get_kv_buffer(self,layer_id)
  AscendMLAPagedTokenToKVPool.get_kv_size_bytes(self)
  AscendMLAPagedTokenToKVPool.get_value_buffer(self,layer_id)
  AscendMLAPagedTokenToKVPool.set_kv_buffer(self,layer,loc,cache_k,cache_v)
  AscendTokenToKVPool._create_buffers(self)
  AscendTokenToKVPool.get_contiguous_buf_infos(self)
  AscendTokenToKVPool.set_kv_buffer(self,layer,loc,cache_k,cache_v,k_scale,v_scale)
  DoubleSparseTokenToKVPool.__init__(self,size,page_size,dtype,head_num,head_dim,layer_num,device,heavy_channel_num,enable_memory_saver,start_layer,end_layer)
  DoubleSparseTokenToKVPool.get_key_buffer(self,layer_id)
  DoubleSparseTokenToKVPool.get_kv_buffer(self,layer_id)
  DoubleSparseTokenToKVPool.get_label_buffer(self,layer_id)
  DoubleSparseTokenToKVPool.get_value_buffer(self,layer_id)
  DoubleSparseTokenToKVPool.set_kv_buffer(self,layer,loc,cache_k,cache_v,cache_label)
  KVCache.__init__(self,size,page_size,dtype,layer_num,device,enable_memory_saver,start_layer,end_layer)
  KVCache.get_cpu_copy(self,indices)
  KVCache.get_key_buffer(self,layer_id)
  KVCache.get_kv_buffer(self,layer_id)
  KVCache.get_value_buffer(self,layer_id)
  KVCache.load_cpu_copy(self,kv_cache_cpu,indices)
  KVCache.register_layer_transfer_counter(self,layer_transfer_counter)
  KVCache.set_kv_buffer(self,layer,loc,cache_k,cache_v)
  MHATokenToKVPool.__init__(self,size,page_size,dtype,head_num,head_dim,layer_num,device,enable_memory_saver,start_layer,end_layer)
  MHATokenToKVPool._clear_buffers(self)
  MHATokenToKVPool._create_buffers(self)
  MHATokenToKVPool._get_key_buffer(self,layer_id)
  MHATokenToKVPool._get_value_buffer(self,layer_id)
  MHATokenToKVPool.get_contiguous_buf_infos(self)
  MHATokenToKVPool.get_cpu_copy(self,indices)
  MHATokenToKVPool.get_key_buffer(self,layer_id)
  MHATokenToKVPool.get_kv_buffer(self,layer_id)
  MHATokenToKVPool.get_kv_size_bytes(self)
  MHATokenToKVPool.get_value_buffer(self,layer_id)
  MHATokenToKVPool.load_cpu_copy(self,kv_cache_cpu,indices)
  MHATokenToKVPool.maybe_get_custom_mem_pool(self)
  MHATokenToKVPool.move_kv_cache(self,tgt_loc,src_loc)
  MHATokenToKVPool.set_kv_buffer(self,layer,loc,cache_k,cache_v,k_scale,v_scale,layer_id_override)
  MLATokenToKVPool.__init__(self,size,page_size,dtype,kv_lora_rank,qk_rope_head_dim,layer_num,device,enable_memory_saver,start_layer,end_layer)
  MLATokenToKVPool.get_contiguous_buf_infos(self)
  MLATokenToKVPool.get_cpu_copy(self,indices)
  MLATokenToKVPool.get_key_buffer(self,layer_id)
  MLATokenToKVPool.get_kv_buffer(self,layer_id)
  MLATokenToKVPool.get_kv_size_bytes(self)
  MLATokenToKVPool.get_value_buffer(self,layer_id)
  MLATokenToKVPool.load_cpu_copy(self,kv_cache_cpu,indices)
  MLATokenToKVPool.maybe_get_custom_mem_pool(self)
  MLATokenToKVPool.set_kv_buffer(self,layer,loc,cache_k,cache_v)
  MLATokenToKVPool.set_mla_kv_buffer(self,layer,loc,cache_k_nope,cache_k_rope)
  ReqToTokenPool.__init__(self,size,max_context_len,device,enable_memory_saver)
  ReqToTokenPool.alloc(self,need_size)
  ReqToTokenPool.available_size(self)
  ReqToTokenPool.clear(self)
  ReqToTokenPool.free(self,free_index)
  ReqToTokenPool.write(self,indices,values)
  SWAKVPool.__init__(self,size,size_swa,dtype,head_num,head_dim,swa_attention_layer_ids,full_attention_layer_ids,enable_kvcache_transpose,device)
  SWAKVPool.get_contiguous_buf_infos(self)
  SWAKVPool.get_key_buffer(self,layer_id)
  SWAKVPool.get_kv_buffer(self,layer_id)
  SWAKVPool.get_kv_size_bytes(self)
  SWAKVPool.get_value_buffer(self,layer_id)
  SWAKVPool.set_kv_buffer(self,layer,loc,cache_k,cache_v,k_scale,v_scale)
  SWAKVPool.translate_loc_from_full_to_swa(self,kv_indices)
  copy_all_layer_kv_cache(data_ptrs,strides,tgt_loc_ptr,src_loc_ptr,num_locs,num_locs_upper)
  set_mla_kv_buffer_kernel(kv_buffer_ptr,cache_k_nope_ptr,cache_k_rope_ptr,loc_ptr,buffer_stride,nope_stride,rope_stride,nope_dim,rope_dim,BLOCK)
  set_mla_kv_buffer_triton(kv_buffer,loc,cache_k_nope,cache_k_rope)
mem_cache/memory_pool_host.py:
  HostKVCache.__init__(self,device_pool,host_to_device_ratio,host_size,page_size,layout,pin_memory,device)
  HostKVCache.alloc(self,need_size)
  HostKVCache.available_size(self)
  HostKVCache.backup_from_device_all_layer(self,device_pool,host_indices,device_indices,io_backend)
  HostKVCache.clear(self)
  HostKVCache.complete_io(self,indices)
  HostKVCache.free(self,indices)
  HostKVCache.get_dummy_flat_data_page(self)
  HostKVCache.get_flat_data_page(self,index)
  HostKVCache.get_size_per_token(self)
  HostKVCache.get_state(self,indices)
  HostKVCache.init_kv_buffer(self)
  HostKVCache.is_backup(self,indices)
  HostKVCache.is_protected(self,indices)
  HostKVCache.is_reserved(self,indices)
  HostKVCache.is_synced(self,indices)
  HostKVCache.load_to_device_per_layer(self,device_pool,host_indices,device_indices,layer_id,io_backend)
  HostKVCache.protect_load(self,indices)
  HostKVCache.protect_write(self,indices)
  HostKVCache.set_from_flat_data_page(self,index,data_page)
  HostKVCache.update_backup(self,indices)
  HostKVCache.update_prefetch(self,indices)
  HostKVCache.update_synced(self,indices)
  MHATokenToKVPoolHost.__init__(self,device_pool,host_to_device_ratio,host_size,page_size,layout,pin_memory,device)
  MHATokenToKVPoolHost.backup_from_device_all_layer(self,device_pool,host_indices,device_indices,io_backend)
  MHATokenToKVPoolHost.get_buffer_meta(self,keys,indices,local_rank)
  MHATokenToKVPoolHost.get_buffer_with_hash(self,keys,indices)
  MHATokenToKVPoolHost.get_dummy_flat_data_page(self)
  MHATokenToKVPoolHost.get_flat_data_page(self,index)
  MHATokenToKVPoolHost.get_ksize_per_token(self)
  MHATokenToKVPoolHost.get_size_per_token(self)
  MHATokenToKVPoolHost.init_kv_buffer(self)
  MHATokenToKVPoolHost.k_buffer(self)
  MHATokenToKVPoolHost.load_to_device_per_layer(self,device_pool,host_indices,device_indices,layer_id,io_backend)
  MHATokenToKVPoolHost.set_from_flat_data_page(self,index,data_page)
  MHATokenToKVPoolHost.v_buffer(self)
  MLATokenToKVPoolHost.__init__(self,device_pool,host_to_device_ratio,host_size,page_size,layout,pin_memory,device)
  MLATokenToKVPoolHost.backup_from_device_all_layer(self,device_pool,host_indices,device_indices,io_backend)
  MLATokenToKVPoolHost.get_buffer_meta(self,keys,indices,local_rank)
  MLATokenToKVPoolHost.get_buffer_with_hash(self,keys,indices)
  MLATokenToKVPoolHost.get_dummy_flat_data_page(self)
  MLATokenToKVPoolHost.get_flat_data_page(self,index)
  MLATokenToKVPoolHost.get_ksize_per_token(self)
  MLATokenToKVPoolHost.get_size_per_token(self)
  MLATokenToKVPoolHost.init_kv_buffer(self)
  MLATokenToKVPoolHost.load_to_device_per_layer(self,device_pool,host_indices,device_indices,layer_id,io_backend)
  MLATokenToKVPoolHost.set_from_flat_data_page(self,index,data_page)
  _decorator(func)
  synchronized(debug_only)
  wrapper(self,*args,**kwargs)
mem_cache/multimodal_cache.py:
  MultiModalCache.__init__(self,max_size)
  MultiModalCache.__len__(self)
  MultiModalCache._allocate(self,embedding_size)
  MultiModalCache._get_tensor_size(self,embedding)
  MultiModalCache.clear(self)
  MultiModalCache.get(self,mm_hash)
  MultiModalCache.has(self,mm_hash)
  MultiModalCache.put(self,mm_hash,embedding)
mem_cache/radix_cache.py:
  RadixCache.__init__(self,req_to_token_pool,token_to_kv_pool_allocator,page_size,disable,enable_kv_cache_events)
  RadixCache._collect_leaves(self)
  RadixCache._delete_leaf(self,node)
  RadixCache._dfs_helper(node)
  RadixCache._insert_helper(self,node,key,value)
  RadixCache._match_prefix_helper(self,node,key)
  RadixCache._print_helper(self,node,indent)
  RadixCache._record_all_cleared_event(self)
  RadixCache._record_remove_event(self,node)
  RadixCache._record_store_event(self,node)
  RadixCache._split_node(self,key,child,split_len)
  RadixCache._total_size_helper(self)
  RadixCache.all_values_flatten(self)
  RadixCache.cache_finished_req(self,req)
  RadixCache.cache_unfinished_req(self,req,chunked)
  RadixCache.dec_lock_ref(self,node)
  RadixCache.evict(self,num_tokens)
  RadixCache.evictable_size(self)
  RadixCache.inc_lock_ref(self,node)
  RadixCache.insert(self,key,value,chunked)
  RadixCache.match_prefix(self,key,**kwargs)
  RadixCache.pretty_print(self)
  RadixCache.protected_size(self)
  RadixCache.reset(self)
  RadixCache.take_events(self)
  RadixCache.total_size(self)
  TreeNode.__init__(self,id)
  TreeNode.__lt__(self,other)
  TreeNode.backuped(self)
  TreeNode.evicted(self)
  TreeNode.get_last_hash_value(self)
  TreeNode.protect_host(self)
  TreeNode.release_host(self)
  _key_match_page_size1(key0,key1)
  _key_match_paged(key0,key1,page_size)
mem_cache/radix_cache_cpp.py:
  RadixCacheCpp.__init__(self,disable,use_hicache,req_to_token_pool,token_to_kv_pool,tp_cache_group,page_size,hicache_ratio,hicache_size,hicache_write_policy,enable_kv_cache_events,hicache_oracle,enable_write_cancel)
  RadixCacheCpp._insert(self,key,value)
  RadixCacheCpp._merge_tensor(self,l)
  RadixCacheCpp.cache_finished_req(self,req)
  RadixCacheCpp.cache_unfinished_req(self,req,chunked)
  RadixCacheCpp.dec_lock_ref(self,node)
  RadixCacheCpp.evict(self,num_tokens)
  RadixCacheCpp.evictable_size(self)
  RadixCacheCpp.inc_lock_ref(self,node)
  RadixCacheCpp.match_prefix(self,key,**kwargs)
  RadixCacheCpp.pretty_print(self)
  RadixCacheCpp.protected_size(self)
  RadixCacheCpp.reset(self)
  RadixCacheCpp.total_size(self)
mem_cache/storage/hf3fs/client_hf3fs.py:
  Hf3fsClient.__init__(self,path,size,bytes_per_page,entries)
  Hf3fsClient.batch_read(self,offsets,tensors)
  Hf3fsClient.batch_write(self,offsets,tensors)
  Hf3fsClient.check(self,offsets,tensors)
  Hf3fsClient.close(self)
  Hf3fsClient.flush(self)
  Hf3fsClient.get_size(self)
  _decorator(func)
  _decorator(func)
  rsynchronized()
  wrapper(self,*args,**kwargs)
  wrapper(self,*args,**kwargs)
  wsynchronized()
mem_cache/storage/hf3fs/mini_3fs_metadata_server.py:
  GlobalMetadataState.__init__(self,persistence_path,save_interval)
  GlobalMetadataState.load_from_disk(self)
  GlobalMetadataState.save_to_disk(self)
  GlobalMetadataState.schedule_save(self)
  GlobalMetadataState.shutdown(self)
  Hf3fsGlobalMetadataClient.__init__(self,base_url,max_retries)
  Hf3fsGlobalMetadataClient._post(self,endpoint,json_data)
  Hf3fsGlobalMetadataClient.clear(self,rank)
  Hf3fsGlobalMetadataClient.confirm_write(self,rank,written_keys_to_confirm,pages_to_release)
  Hf3fsGlobalMetadataClient.delete_keys(self,rank,keys)
  Hf3fsGlobalMetadataClient.exists(self,rank,keys)
  Hf3fsGlobalMetadataClient.get_page_indices(self,rank,keys)
  Hf3fsGlobalMetadataClient.initialize(self,rank,num_pages)
  Hf3fsGlobalMetadataClient.reserve_and_allocate_page_indices(self,rank,keys)
  Hf3fsLocalMetadataClient.__init__(self)
  Hf3fsLocalMetadataClient.clear(self,rank)
  Hf3fsLocalMetadataClient.confirm_write(self,rank,written_keys_to_confirm,pages_to_release)
  Hf3fsLocalMetadataClient.delete_keys(self,rank,keys)
  Hf3fsLocalMetadataClient.exists(self,rank,keys)
  Hf3fsLocalMetadataClient.get_page_indices(self,rank,keys)
  Hf3fsLocalMetadataClient.initialize(self,rank,num_pages)
  Hf3fsLocalMetadataClient.reserve_and_allocate_page_indices(self,rank,keys)
  Hf3fsMetadataServer.__init__(self,persistence_path,save_interval)
  Hf3fsMetadataServer._setup_routes(self)
  Hf3fsMetadataServer.get_rank_metadata(self,rank)
  Hf3fsMetadataServer.run(self,host,port)
  RankMetadata.__init__(self,num_pages)
  RankMetadata.clear_all(self)
  RankMetadata.confirm_write(self,written_keys_to_confirm,pages_to_release)
  RankMetadata.delete_keys(self,keys)
  RankMetadata.exists_keys(self,keys)
  RankMetadata.get_page_indices(self,keys)
  RankMetadata.reserve_and_allocate_page_indices(self,keys)
  async Hf3fsMetadataServer.clear(self,rank)
  async Hf3fsMetadataServer.confirm_write(self,rank,request)
  async Hf3fsMetadataServer.delete_keys(self,rank,request)
  async Hf3fsMetadataServer.exists(self,rank,request)
  async Hf3fsMetadataServer.get_page_indices(self,rank,request)
  async Hf3fsMetadataServer.initialize(self,rank,request)
  async Hf3fsMetadataServer.reserve_and_allocate_page_indices(self,rank,request)
  run_metadata_server(host,port,persistence_path,save_interval)
mem_cache/storage/hf3fs/storage_hf3fs.py:
  AtomicCounter.__init__(self,n)
  AtomicCounter.next(self)
  Hf3fsMetadataInterface.clear(self,rank)
  Hf3fsMetadataInterface.confirm_write(self,rank,written_keys_to_confirm,pages_to_release)
  Hf3fsMetadataInterface.delete_keys(self,rank,keys)
  Hf3fsMetadataInterface.exists(self,rank,keys)
  Hf3fsMetadataInterface.get_page_indices(self,rank,keys)
  Hf3fsMetadataInterface.initialize(self,rank,num_pages)
  Hf3fsMetadataInterface.reserve_and_allocate_page_indices(self,rank,keys)
  HiCacheHF3FS.__init__(self,rank,file_path,file_size,numjobs,bytes_per_page,entries,dtype,metadata_client,is_mla_model)
  HiCacheHF3FS.batch_exists(self,keys)
  HiCacheHF3FS.batch_get(self,keys,target_locations,target_sizes)
  HiCacheHF3FS.batch_set(self,keys,values,target_locations,target_sizes)
  HiCacheHF3FS.clear(self)
  HiCacheHF3FS.close(self)
  HiCacheHF3FS.delete(self,key)
  HiCacheHF3FS.exists(self,key)
  HiCacheHF3FS.from_env_config(bytes_per_page,dtype,storage_config)
  HiCacheHF3FS.get(self,key,target_location,target_sizes)
  HiCacheHF3FS.set(self,key,value,target_location,target_sizes)
  _decorator(func)
  synchronized()
  wrapper(self,*args,**kwargs)
mem_cache/storage/hf3fs/test_hf3fs_utils.py:
  test_rw_shm()
mem_cache/storage/mooncake_store/mooncake_store.py:
  MooncakeStore.__init__(self,storage_config)
  MooncakeStore._batch_exist(self,key_strs)
  MooncakeStore._get_batch_zero_copy_impl(self,key_strs,buffer_ptrs,buffer_sizes)
  MooncakeStore._put_batch_zero_copy_impl(self,key_strs,buffer_ptrs,buffer_sizes)
  MooncakeStore.batch_exists(self,keys)
  MooncakeStore.batch_get(self,keys,target_location,target_sizes)
  MooncakeStore.batch_set(self,keys,values,target_location,target_sizes)
  MooncakeStore.clear(self)
  MooncakeStore.close(self)
  MooncakeStore.delete(self,key)
  MooncakeStore.exists(self,key)
  MooncakeStore.get(self,key,target_location,target_sizes)
  MooncakeStore.register_buffer(self,buffer)
  MooncakeStore.set(self,key,value,target_location,target_sizes)
  MooncakeStore.warmup(self)
  MooncakeStoreConfig.__post_init__(self)
  MooncakeStoreConfig.from_file()
  MooncakeStoreConfig.load_from_env()
mem_cache/storage/mooncake_store/unit_test.py:
  test_exists()
  test_init_and_warmup()
  test_register_buffer()
  test_set_and_get()
mem_cache/storage/nixl/hicache_nixl.py:
  HiCacheNixl.__init__(self,file_path,plugin)
  HiCacheNixl._execute_transfer(self,buffers,keys,direction)
  HiCacheNixl.batch_get(self,keys,target_locations,target_sizes)
  HiCacheNixl.batch_set(self,keys,values,target_locations,target_sizes)
  HiCacheNixl.exists(self,key)
  HiCacheNixl.get(self,key,target_location,target_sizes)
  HiCacheNixl.register_buffers(self,buffers)
  HiCacheNixl.register_files(self,file_paths,open_file)
  HiCacheNixl.register_objects(self,keys,sizes)
  HiCacheNixl.set(self,key,value,target_location,target_sizes)
mem_cache/storage/nixl/nixl_utils.py:
  NixlBackendSelection.__init__(self,plugin)
  NixlBackendSelection.create_backend(self,agent)
  NixlBackendSelection.set_bucket(self,bucket_name)
  NixlFileManager.__init__(self,base_dir)
  NixlFileManager.close_file(self,fd)
  NixlFileManager.create_file(self,file_path)
  NixlFileManager.files_to_nixl_tuples(self,file_paths)
  NixlFileManager.get_file_path(self,key)
  NixlFileManager.open_file(self,file_path)
  NixlRegistration.__init__(self,agent)
  NixlRegistration._register_memory(self,items,mem_type)
  NixlRegistration.create_query_tuples(self,key,mem_type,file_manager)
mem_cache/storage/nixl/test_hicache_nixl_storage.py:
  TestNixlUnified.delete_test_file(self,file_path)
  TestNixlUnified.setUp(self)
  TestNixlUnified.tearDown(self)
  TestNixlUnified.test_basic_file_operations(self)
  TestNixlUnified.test_batch_set_get(self)
  TestNixlUnified.test_create_nixl_tuples(self)
  TestNixlUnified.test_data_integrity(self)
  TestNixlUnified.test_error_handling(self)
  TestNixlUnified.test_mixed_operations(self)
  TestNixlUnified.test_register_buffers(self)
  TestNixlUnified.test_register_files_with_tuples(self)
  TestNixlUnified.test_single_set_get(self)
  TestNixlUnified.verify_tensor_lists_equal(self,expected,actual)
  TestNixlUnified.verify_tensors_equal(self,expected,actual)
mem_cache/swa_radix_cache.py:
  LRUList.__init__(self,swa)
  LRUList._add_node(self,node)
  LRUList._add_node_after(self,old_node,new_node)
  LRUList._get_lru(self)
  LRUList._remove_node(self,node)
  LRUList.get_leaf_lru_no_lock(self)
  LRUList.get_lru_no_lock(self)
  LRUList.get_prev_leaf_no_lock(self,node,check_id)
  LRUList.get_prev_no_lock(self,node,check_id)
  LRUList.in_list(self,node)
  LRUList.insert_mru(self,node)
  LRUList.remove_node(self,node)
  LRUList.reset_node_and_parents_mru(self,node,root_node)
  LRUList.reset_node_mru(self,node)
  LRUList.sanity_check(self,tree_cache)
  LRUList.sanity_check_evictable_size(self)
  SWARadixCache.__init__(self,req_to_token_pool,token_to_kv_pool_allocator,sliding_window_size,page_size,disable)
  SWARadixCache._collect_all_nodes(self)
  SWARadixCache._collect_leaves(self)
  SWARadixCache._collect_nontombstone_nodes(self)
  SWARadixCache._delete_leaf(self,node)
  SWARadixCache._delete_tombstone_leaf(self,node)
  SWARadixCache._dfs_helper(node)
  SWARadixCache._insert_helper(self,node,key,value,update_kv_after_len)
  SWARadixCache._iteratively_delete_tombstone_leaf(self,node)
  SWARadixCache._match_prefix_helper(self,key)
  SWARadixCache._print_helper(self,node,indent)
  SWARadixCache._split_node(self,key,child,split_len)
  SWARadixCache._tombstone_internal_node(self,node)
  SWARadixCache._total_size_helper(self)
  SWARadixCache.all_values_flatten(self)
  SWARadixCache.cache_finished_req(self,req)
  SWARadixCache.cache_unfinished_req(self,req,chunked)
  SWARadixCache.dec_lock_ref(self,node,swa_uuid_for_lock)
  SWARadixCache.evict(self,full_num_tokens,swa_num_tokens)
  SWARadixCache.evictable_size(self)
  SWARadixCache.full_evictable_size(self)
  SWARadixCache.full_lru_list_evictable_size(self)
  SWARadixCache.full_protected_size(self)
  SWARadixCache.inc_lock_ref(self,node)
  SWARadixCache.insert(self,key,value,prev_prefix_len)
  SWARadixCache.match_prefix(self,key,**kwargs)
  SWARadixCache.pretty_print(self)
  SWARadixCache.protected_size(self)
  SWARadixCache.reset(self)
  SWARadixCache.sanity_check(self)
  SWARadixCache.swa_evictable_size(self)
  SWARadixCache.swa_lru_list_evictable_size(self)
  SWARadixCache.swa_protected_size(self)
  SWARadixCache.total_size(self)
  TreeNode.__init__(self,id)
  TreeNode.__lt__(self,other)
  TreeNode.backuped(self)
  TreeNode.evicted(self)
  _key_match_page_size1(key0,key1)
  _key_match_paged(key0,key1,page_size)
  gen_swa_uuid()
