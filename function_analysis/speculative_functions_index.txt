AST Function Index
Root: /Users/vincentzed/Documents/Github/open_source/sglang/python/sglang/srt
Excluded directories:

File: speculative/build_eagle_tree.py
  - name: build_tree_kernel_efficient_preprocess
    signature: (verified_id: torch.Tensor, score_list: List[torch.Tensor], token_list: List[torch.Tensor], parents_list: List[torch.Tensor], num_verify_tokens: int)
  - name: build_tree_kernel_efficient
    signature: (verified_id: torch.Tensor, score_list: List[torch.Tensor], token_list: List[torch.Tensor], parents_list: List[torch.Tensor], seq_lens: torch.Tensor, seq_lens_sum: int, topk: int, spec_steps: int, num_verify_tokens: int, tree_mask_mode: TreeMaskMode = TreeMaskMode.FULL_MASK, tree_mask_buf: Optional[torch.Tensor] = None, position_buf: Optional[torch.Tensor] = None)
  - name: test_build_tree_kernel_efficient
    signature: ()

File: speculative/eagle_draft_cuda_graph_runner.py
  - name: __init__
    signature: (self, eagle_worker: EAGLEWorker)
    class: EAGLEDraftCudaGraphRunner
  - name: can_run
    signature: (self, forward_batch: ForwardBatch)
    class: EAGLEDraftCudaGraphRunner
  - name: capture
    signature: (self)
    class: EAGLEDraftCudaGraphRunner
  - name: capture_one_batch_size
    signature: (self, num_seqs: int, forward: Callable)
    class: EAGLEDraftCudaGraphRunner
  - name: run_once
    signature: ()
    class: EAGLEDraftCudaGraphRunner
  - name: _postprocess_output_to_raw_bs
    signature: (self, out, raw_bs)
    class: EAGLEDraftCudaGraphRunner
  - name: replay
    signature: (self, forward_batch: ForwardBatch)
    class: EAGLEDraftCudaGraphRunner

File: speculative/eagle_draft_extend_cuda_graph_runner.py
  - name: __init__
    signature: (self, eagle_worker: EAGLEWorker)
    class: EAGLEDraftExtendCudaGraphRunner
  - name: can_run
    signature: (self, forward_batch: ForwardBatch)
    class: EAGLEDraftExtendCudaGraphRunner
  - name: capture
    signature: (self)
    class: EAGLEDraftExtendCudaGraphRunner
  - name: capture_one_batch_size
    signature: (self, bs: int, forward: Callable)
    class: EAGLEDraftExtendCudaGraphRunner
  - name: run_once
    signature: ()
    class: EAGLEDraftExtendCudaGraphRunner
  - name: replay
    signature: (self, forward_batch: ForwardBatch)
    class: EAGLEDraftExtendCudaGraphRunner

File: speculative/eagle_utils.py
  - name: prepare_for_extend
    signature: (self, batch: ScheduleBatch)
    class: EagleDraftInput
  - name: create_idle_input
    signature: (cls, device: torch.device, hidden_size: int, dtype: torch.dtype, topk: int, capture_hidden_mode: CaptureHiddenMode)
    class: EagleDraftInput
  - name: prepare_extend_after_decode
    signature: (self, batch: ScheduleBatch, speculative_num_steps: int)
    class: EagleDraftInput
  - name: generate_attn_arg_prefill
    signature: (self, req_pool_indices: torch.Tensor, paged_kernel_lens: torch.Tensor, paged_kernel_lens_sum: int, req_to_token: torch.Tensor)
    class: EagleDraftInput
  - name: filter_batch
    signature: (self, new_indices: torch.Tensor, has_been_filtered: bool = True)
    class: EagleDraftInput
  - name: merge_batch
    signature: (self, spec_info: EagleDraftInput)
    class: EagleDraftInput
  - name: create_idle_input
    signature: (cls, topk: int, spec_steps: int, num_verify_tokens: int)
    class: EagleVerifyInput
  - name: prepare_for_verify
    signature: (self, batch: ScheduleBatch, page_size: int)
    class: EagleVerifyInput
  - name: generate_attn_arg_prefill
    signature: (self, req_pool_indices: torch.Tensor, paged_kernel_lens: torch.Tensor, paged_kernel_lens_sum: int, req_to_token: torch.Tensor)
    class: EagleVerifyInput
  - name: verify
    signature: (self, batch: ScheduleBatch, logits_output: LogitsProcessorOutput, token_to_kv_pool_allocator: BaseTokenToKVPoolAllocator, page_size: int, vocab_mask: Optional[torch.Tensor] = None)
    return: torch.Tensor
    class: EagleVerifyInput
    doc: Verify and find accepted tokens based on logits output and batch
  - name: create_extend_after_decode_spec_info
    signature: (verified_id, seq_lens, accept_lens, positions, new_verified_id, bs_upper: tl.constexpr)
  - name: assign_req_to_token_pool
    signature: (req_pool_indices, req_to_token, start_offset, end_offset, out_cache_loc, pool_len: tl.constexpr, bs_upper: tl.constexpr)
  - name: assign_draft_cache_locs
    signature: (req_pool_indices, req_to_token, seq_lens, extend_lens, num_new_pages_per_topk, out_cache_loc, pool_len: tl.constexpr, topk: tl.constexpr, speculative_num_steps: tl.constexpr, page_size: tl.constexpr, bs_upper: tl.constexpr, iter_upper: tl.constexpr)
  - name: generate_draft_decode_kv_indices
    signature: (req_pool_indices, req_to_token, paged_kernel_lens, kv_indices, kv_indptr, positions, pool_len: tl.constexpr, kv_indices_stride: tl.constexpr, kv_indptr_stride: tl.constexpr, bs_upper: tl.constexpr, iter_upper: tl.constexpr, num_tokens_upper: tl.constexpr, page_size: tl.constexpr)
  - name: align_evict_mask_to_page_size
    signature: (seq_lens, evict_mask, page_size: tl.constexpr, num_draft_tokens: tl.constexpr, BLOCK_SIZE: tl.constexpr)
  - name: get_target_cache_loc
    signature: (tgt_cache_loc, to_free_slots, accept_length, to_free_num_slots, out_cache_loc, num_verify_tokens: tl.constexpr, num_verify_tokens_upper: tl.constexpr, bs_upper: tl.constexpr)
  - name: get_src_tgt_cache_loc
    signature: (seq_lens: torch.Tensor, out_cache_loc: torch.Tensor, accept_index: torch.Tensor, accept_length: torch.Tensor, draft_token_num: int, page_size: int)
  - name: filter_finished_cache_loc_kernel
    signature: (out_cache_loc, tgt_cache_loc, accept_length, accept_length_filter, bs_upper: tl.constexpr, num_verify_tokens_upper: tl.constexpr)
  - name: create_accept_length_filter
    signature: (accept_length: torch.Tensor, unfinished_index_device: torch.Tensor, seq_lens: torch.Tensor)
  - name: select_top_k_tokens
    signature: (i: int, topk_p: torch.Tensor, topk_index: torch.Tensor, hidden_states: torch.Tensor, scores: torch.Tensor, topk: int)
  - name: _generate_simulated_accept_index
    signature: (accept_index, predict, accept_length, simulate_acc_len, bs, spec_steps)
  - name: traverse_tree
    signature: (retrieve_next_token: torch.Tensor, retrieve_next_sibling: torch.Tensor, draft_tokens: torch.Tensor, grammar: BaseGrammarObject, allocate_token_bitmask: torch.Tensor)
    doc: Traverse the tree constructed by the draft model to generate the logits mask.
  - name: dfs
    signature: (curr: int, retrieve_next_token: torch.Tensor, retrieve_next_sibling: torch.Tensor, parent_pos: int)
  - name: generate_token_bitmask
    signature: (reqs: List[Req], verify_input: EagleVerifyInput, retrieve_next_token_cpu: torch.Tensor, retrieve_next_sibling_cpu: torch.Tensor, draft_tokens_cpu: torch.Tensor, vocab_size: int)
    doc: Generate the logit mask for structured output.

File: speculative/eagle_worker.py
  - name: draft_tp_context
    signature: (tp_group: GroupCoordinator)
  - name: __init__
    signature: (self, server_args: ServerArgs, gpu_id: int, tp_rank: int, dp_rank: Optional[int], moe_ep_rank: int, nccl_port: int, target_worker: TpModelWorker)
    class: EAGLEWorker
  - name: init_attention_backend
    signature: (self)
    class: EAGLEWorker
  - name: init_cuda_graphs
    signature: (self)
    class: EAGLEWorker
    doc: Capture cuda graphs.
  - name: draft_model_runner
    signature: (self)
    class: EAGLEWorker
  - name: forward_batch_speculative_generation
    signature: (self, batch: ScheduleBatch)
    return: Tuple[LogitsProcessorOutput, torch.Tensor, int, int, bool]
    class: EAGLEWorker
    doc: Run speculative decoding forward.
  - name: check_forward_draft_extend_after_decode
    signature: (self, batch: ScheduleBatch)
    class: EAGLEWorker
  - name: forward_target_extend
    signature: (self, batch: ScheduleBatch)
    return: Tuple[LogitsProcessorOutput, torch.Tensor, int, Optional[torch.Tensor]]
    class: EAGLEWorker
    doc: Run the target extend.
  - name: _draft_preprocess_decode
    signature: (self, batch: ScheduleBatch)
    class: EAGLEWorker
  - name: _draft_preprocess_idle
    signature: (self, batch: ScheduleBatch)
    class: EAGLEWorker
  - name: draft
    signature: (self, batch: ScheduleBatch)
    class: EAGLEWorker
  - name: draft_forward
    signature: (self, forward_batch: ForwardBatch)
    class: EAGLEWorker
  - name: verify
    signature: (self, batch: ScheduleBatch, spec_info: EagleVerifyInput)
    class: EAGLEWorker
  - name: add_logprob_values
    signature: (self, batch: ScheduleBatch, res: EagleVerifyOutput, logits_output: LogitsProcessorOutput)
    class: EAGLEWorker
  - name: forward_draft_extend
    signature: (self, batch: ScheduleBatch, hidden_states: torch.Tensor, next_token_ids: torch.Tensor, seq_lens_cpu: Optional[torch.Tensor])
    class: EAGLEWorker
    doc: Run draft model extend. This API modifies the states of the batch.
  - name: forward_draft_extend_after_decode
    signature: (self, batch: ScheduleBatch)
    class: EAGLEWorker
  - name: capture_for_decode
    signature: (self, logits_output: LogitsProcessorOutput, draft_input: EagleDraftInput)
    class: EAGLEWorker
  - name: _detect_nan_if_needed
    signature: (self, logits_output: LogitsProcessorOutput)
    class: EAGLEWorker
  - name: load_token_map
    signature: (token_map_path: str)
    return: List[int]
  - name: get_last_loc_large_page_size_top_k_1
    signature: (req_to_token: torch.Tensor, req_pool_indices: torch.Tensor, seq_lens, speculative_num_steps: int)
  - name: get_last_loc_large_page_size_large_top_k
    signature: (req_to_token: torch.Tensor, req_pool_indices: torch.Tensor, seq_lens: torch.Tensor, speculative_num_steps: int, topk: int, page_size: int)

File: speculative/spec_info.py
  - name: is_none
    signature: (self)
    class: SpeculativeAlgorithm
  - name: is_eagle
    signature: (self)
    class: SpeculativeAlgorithm
  - name: is_eagle3
    signature: (self)
    class: SpeculativeAlgorithm
  - name: from_string
    signature: (name: str)
    class: SpeculativeAlgorithm
