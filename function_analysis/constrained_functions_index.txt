AST Function Index
Root: /Users/vincentzed/Documents/Github/open_source/sglang/python/sglang/srt
Excluded directories:

File: constrained/base_grammar_backend.py
  - name: __init__
    signature: (self)
    class: BaseGrammarObject
  - name: accept_token
    signature: (self, token: int)
    return: None
    class: BaseGrammarObject
    doc: Accept a token in the grammar.
  - name: rollback
    signature: (self, k: int)
    class: BaseGrammarObject
  - name: is_terminated
    signature: (self)
    class: BaseGrammarObject
  - name: allocate_vocab_mask
    signature: (self, vocab_size: int, batch_size: int, device)
    return: torch.Tensor
    class: BaseGrammarObject
  - name: fill_vocab_mask
    signature: (self, vocab_mask: torch.Tensor, idx: int)
    return: None
    class: BaseGrammarObject
  - name: move_vocab_mask
    signature: (vocab_mask: torch.Tensor, device)
    return: torch.Tensor
    class: BaseGrammarObject
  - name: apply_vocab_mask
    signature: (logits: torch.Tensor, vocab_mask: torch.Tensor)
    return: None
    class: BaseGrammarObject
  - name: copy
    signature: (self)
    return: 'BaseGrammarObject'
    class: BaseGrammarObject
  - name: finished
    signature: (self)
    class: BaseGrammarObject
  - name: finished
    signature: (self, finished)
    class: BaseGrammarObject
  - name: try_jump_forward
    signature: (self, tokenizer)
    return: Optional[Tuple[List[int], str]]
    class: BaseGrammarObject
    doc: Try to jump forward in the grammar.
  - name: jump_forward_str_state
    signature: (self, helper: Tuple[List[int], str])
    return: Tuple[str, int]
    class: BaseGrammarObject
    doc: Jump forward for the grammar.
  - name: jump_and_retokenize
    signature: (self, old_output_ids: List[int], new_output_ids: List[int], next_state: int)
    return: None
    class: BaseGrammarObject
    doc: Jump forward occurs, and update the grammar state if needed.
  - name: __init__
    signature: (self)
    class: BaseGrammarBackend
  - name: _not_supported
    signature: (self, key_type: str, key_string: str)
    return: None
    class: BaseGrammarBackend
  - name: dispatch_fallback
    signature: (self, key_type: str, key_string: str)
    return: Optional[BaseGrammarObject]
    class: BaseGrammarBackend
    doc: This function should not be reached in any case.
  - name: dispatch_json
    signature: (self, key_string: str)
    return: Optional[BaseGrammarObject]
    class: BaseGrammarBackend
  - name: dispatch_regex
    signature: (self, key_string: str)
    return: Optional[BaseGrammarObject]
    class: BaseGrammarBackend
  - name: dispatch_ebnf
    signature: (self, key_string: str)
    return: Optional[BaseGrammarObject]
    class: BaseGrammarBackend
  - name: dispatch_structural_tag
    signature: (self, key_string: str)
    return: Optional[BaseGrammarObject]
    class: BaseGrammarBackend
  - name: _init_value_dispatch
    signature: (self, key: Tuple[str, str])
    return: Optional[BaseGrammarObject]
    class: BaseGrammarBackend
  - name: get_cached_or_future_value
    signature: (self, key: Tuple[str, str])
    return: Optional[BaseGrammarObject]
    class: BaseGrammarBackend
  - name: set_cache
    signature: (self, key: Tuple[str, str], value: BaseGrammarObject)
    class: BaseGrammarBackend
  - name: reset
    signature: (self)
    class: BaseGrammarBackend
  - name: create_grammar_backend
    signature: (server_args: ServerArgs, tokenizer, vocab_size: int, eos_token_ids: Optional[set] = None)
    return: Optional[BaseGrammarBackend]

File: constrained/llguidance_backend.py
  - name: __init__
    signature: (self, llguidance_tokenizer: LLTokenizer, serialized_grammar: str)
    class: GuidanceGrammar
  - name: accept_token
    signature: (self, token: int)
    class: GuidanceGrammar
  - name: fill_vocab_mask
    signature: (self, vocab_mask: torch.Tensor, idx: int)
    return: None
    class: GuidanceGrammar
  - name: allocate_vocab_mask
    signature: (self, vocab_size: int, batch_size: int, device)
    return: torch.Tensor
    class: GuidanceGrammar
  - name: move_vocab_mask
    signature: (vocab_mask: torch.Tensor, device)
    return: torch.Tensor
    class: GuidanceGrammar
  - name: apply_vocab_mask
    signature: (logits: torch.Tensor, vocab_mask: torch.Tensor)
    return: None
    class: GuidanceGrammar
  - name: copy
    signature: (self)
    class: GuidanceGrammar
  - name: try_jump_forward
    signature: (self, tokenizer)
    return: Optional[Tuple[List[int], str]]
    class: GuidanceGrammar
  - name: jump_forward_str_state
    signature: (self, helper: Tuple[List[int], str])
    return: Tuple[str, int]
    class: GuidanceGrammar
  - name: jump_and_retokenize
    signature: (self, old_output_ids: List[int], new_output_ids: List[int], next_state: int)
    class: GuidanceGrammar
  - name: __init__
    signature: (self, tokenizer, whitespace_pattern: Optional[str] = None, n_vocab: Optional[int] = None)
    class: GuidanceBackend
  - name: _from_serialized
    signature: (self, serialized_grammar)
    return: Optional[GuidanceGrammar]
    class: GuidanceBackend
  - name: dispatch_json
    signature: (self, key_string: str)
    return: Optional[GuidanceGrammar]
    class: GuidanceBackend
  - name: dispatch_regex
    signature: (self, key_string: str)
    return: Optional[GuidanceGrammar]
    class: GuidanceBackend
  - name: dispatch_ebnf
    signature: (self, key_string: str)
    return: Optional[GuidanceGrammar]
    class: GuidanceBackend
  - name: dispatch_structural_tag
    signature: (self, key_string: str)
    return: Optional[GuidanceGrammar]
    class: GuidanceBackend

File: constrained/outlines_backend.py
  - name: __init__
    signature: (self, guide: RegexGuide, jump_forward_map: Union[OutlinesJumpForwardMap, None])
    return: None
    class: OutlinesGrammar
  - name: accept_token
    signature: (self, token: int)
    class: OutlinesGrammar
  - name: allocate_vocab_mask
    signature: (self, vocab_size: int, batch_size: int, device)
    return: torch.Tensor
    class: OutlinesGrammar
  - name: move_vocab_mask
    signature: (vocab_mask: torch.Tensor, device)
    return: torch.Tensor
    class: OutlinesGrammar
  - name: fill_vocab_mask
    signature: (self, vocab_mask: torch.Tensor, idx: int)
    return: None
    class: OutlinesGrammar
  - name: apply_vocab_mask
    signature: (logits: torch.Tensor, vocab_mask: torch.Tensor)
    class: OutlinesGrammar
  - name: copy
    signature: (self)
    class: OutlinesGrammar
  - name: try_jump_forward
    signature: (self, tokenizer)
    return: Optional[Tuple]
    class: OutlinesGrammar
  - name: jump_forward_str_state
    signature: (self, helper: Tuple[List[int], str])
    return: Tuple[str, int]
    class: OutlinesGrammar
  - name: jump_and_retokenize
    signature: (self, old_output_ids: List[int], new_output_ids: List[int], next_state: int)
    class: OutlinesGrammar
  - name: __init__
    signature: (self, tokenizer, whitespace_pattern: bool)
    class: OutlinesGrammarBackend
  - name: fset
    signature: (self, value)
    class: OutlinesGrammarBackend
  - name: _compile_regex
    signature: (self, regex: str)
    return: Optional[OutlinesGrammar]
    class: OutlinesGrammarBackend
  - name: dispatch_ebnf
    signature: (self, key_string: str)
    class: OutlinesGrammarBackend
  - name: dispatch_structural_tag
    signature: (self, key_string: str)
    class: OutlinesGrammarBackend
  - name: dispatch_json
    signature: (self, key_string: str)
    class: OutlinesGrammarBackend
  - name: dispatch_regex
    signature: (self, key_string: str)
    class: OutlinesGrammarBackend
  - name: build_regex_from_object
    signature: (object: Union[str, BaseModel, Dict], whitespace_pattern: Optional[str] = None)

File: constrained/outlines_jump_forward.py
  - name: disk_cache
    signature: (expire: Optional[float] = None, typed = False, ignore = ())
  - name: init_state_to_jump_forward
    signature: (regex_string)
  - name: __init__
    signature: (self, regex_string)
    class: OutlinesJumpForwardMap
  - name: jump_forward_symbol
    signature: (self, state)
    class: OutlinesJumpForwardMap
  - name: jump_forward_byte
    signature: (self, state)
    class: OutlinesJumpForwardMap
  - name: is_jump_forward_symbol_state
    signature: (self, state)
    class: OutlinesJumpForwardMap
  - name: test_main
    signature: (regex_string)

File: constrained/reasoner_grammar_backend.py
  - name: __init__
    signature: (self, grammar: BaseGrammarObject, think_end_id)
    class: ReasonerGrammarObject
  - name: accept_token
    signature: (self, token: int)
    class: ReasonerGrammarObject
  - name: allocate_vocab_mask
    signature: (self, vocab_size: int, batch_size: int, device)
    return: torch.Tensor
    class: ReasonerGrammarObject
  - name: fill_vocab_mask
    signature: (self, vocab_mask: torch.Tensor, idx: int)
    return: None
    class: ReasonerGrammarObject
  - name: move_vocab_mask
    signature: (self, vocab_mask: torch.Tensor, device)
    return: torch.Tensor
    class: ReasonerGrammarObject
  - name: apply_vocab_mask
    signature: (self)
    class: ReasonerGrammarObject
  - name: copy
    signature: (self)
    return: BaseGrammarObject
    class: ReasonerGrammarObject
  - name: finished
    signature: (self)
    class: ReasonerGrammarObject
  - name: finished
    signature: (self, finished)
    class: ReasonerGrammarObject
  - name: try_jump_forward
    signature: (self, tokenizer)
    class: ReasonerGrammarObject
  - name: jump_forward_str_state
    signature: (self, helper)
    class: ReasonerGrammarObject
  - name: jump_and_retokenize
    signature: (self, old_output_ids: List[int], new_output_ids: List[int], next_state: int)
    class: ReasonerGrammarObject
  - name: __init__
    signature: (self, grammar_backend: BaseGrammarBackend, think_end_id)
    class: ReasonerGrammarBackend
  - name: _init_value_dispatch
    signature: (self, key: Tuple[str, str])
    return: Optional[ReasonerGrammarObject]
    class: ReasonerGrammarBackend

File: constrained/triton_ops/bitmask_ops.py
  - name: apply_token_bitmask_inplace_kernel
    signature: (logits_ptr, bitmask_ptr, indices_ptr, num_rows, vocab_size, logits_strides, bitmask_strides, NUM_SMS: tl.constexpr, BLOCK_SIZE: tl.constexpr)
    doc: Apply a bitmask to logits in-place using Triton. The bitmask is a 01 bitwise compressed tensor,
  - name: apply_token_bitmask_inplace_triton
    signature: (logits: torch.Tensor, bitmask: torch.Tensor, indices: Optional[Union[List[int], torch.Tensor]] = None)

File: constrained/xgrammar_backend.py
  - name: __init__
    signature: (self, matcher: GrammarMatcher, vocab_size: int, ctx: CompiledGrammar, override_stop_tokens: Optional[Union[List[int], int]], key_string: Optional[str] = None)
    return: None
    class: XGrammarGrammar
  - name: accept_token
    signature: (self, token: int)
    class: XGrammarGrammar
  - name: rollback
    signature: (self, k: int)
    class: XGrammarGrammar
  - name: is_terminated
    signature: (self)
    class: XGrammarGrammar
  - name: allocate_vocab_mask
    signature: (self, vocab_size: int, batch_size: int, device)
    return: torch.Tensor
    class: XGrammarGrammar
  - name: fill_vocab_mask
    signature: (self, vocab_mask: torch.Tensor, idx: int)
    return: None
    class: XGrammarGrammar
  - name: move_vocab_mask
    signature: (vocab_mask: torch.Tensor, device)
    return: torch.Tensor
    class: XGrammarGrammar
  - name: apply_vocab_mask
    signature: (self, logits: torch.Tensor, vocab_mask: torch.Tensor)
    return: None
    class: XGrammarGrammar
  - name: copy
    signature: (self)
    class: XGrammarGrammar
  - name: try_jump_forward
    signature: (self, tokenizer)
    return: Optional[Tuple[List[int], str]]
    class: XGrammarGrammar
  - name: jump_forward_str_state
    signature: (self, helper: Tuple[List[int], str])
    return: Tuple[str, int]
    class: XGrammarGrammar
  - name: jump_and_retokenize
    signature: (self, old_output_ids: List[int], new_output_ids: List[int], next_state: int)
    class: XGrammarGrammar
  - name: __repr__
    signature: (self)
    class: XGrammarGrammar
  - name: __init__
    signature: (self, tokenizer, vocab_size: int, model_eos_token_ids: Optional[List[int]] = None)
    class: XGrammarGrammarBackend
  - name: _from_context
    signature: (self, ctx: CompiledGrammar, key_string: str)
    return: XGrammarGrammar
    class: XGrammarGrammarBackend
  - name: dispatch_json
    signature: (self, key_string: str)
    return: Optional[XGrammarGrammar]
    class: XGrammarGrammarBackend
  - name: dispatch_ebnf
    signature: (self, key_string: str)
    return: Optional[XGrammarGrammar]
    class: XGrammarGrammarBackend
  - name: dispatch_regex
    signature: (self, key_string: str)
    return: Optional[XGrammarGrammar]
    class: XGrammarGrammarBackend
  - name: dispatch_structural_tag
    signature: (self, key_string: str)
    return: Optional[XGrammarGrammar]
    class: XGrammarGrammarBackend
  - name: reset
    signature: (self)
    class: XGrammarGrammarBackend
