
# python/sglang/srt/disaggregation/decode.py
  DecodeReqToTokenPool.__init__(size, max_context_len, device, enable_memory_saver, pre_alloc_size)
  DecodeReqToTokenPool.write(indices, values)
  DecodeReqToTokenPool.available_size()
  DecodeReqToTokenPool.alloc(need_size)
  DecodeReqToTokenPool.free(free_index, List[int]])
  DecodeReqToTokenPool.clear()
  DecodePreallocQueue.__init__(req_to_token_pool, token_to_kv_pool_allocator, draft_token_to_kv_pool, req_to_metadata_buffer_idx_allocator, metadata_buffers, scheduler, transfer_queue, tree_cache, gloo_group, tp_rank, tp_size, dp_size, gpu_id, bootstrap_port, max_total_num_tokens, prefill_pp_size, num_reserved_decode_tokens, transfer_backend)
  DecodePreallocQueue.add(req, is_retracted)
  DecodePreallocQueue.extend(reqs, is_retracted)
  DecodePreallocQueue.resume_retracted_reqs()
  DecodePreallocQueue.pop_preallocated()
  DecodePreallocQueue.num_tokens_pre_allocated()
  DecodeTransferQueue.__init__(gloo_group, req_to_metadata_buffer_idx_allocator, tp_rank, metadata_buffers, scheduler, tree_cache)
  DecodeTransferQueue.add(decode_req)
  DecodeTransferQueue.extend(decode_reqs)
  DecodeTransferQueue.pop_transferred()
  SchedulerDisaggregationDecodeMixin.event_loop_normal_disagg_decode()
  SchedulerDisaggregationDecodeMixin.event_loop_overlap_disagg_decode()
  SchedulerDisaggregationDecodeMixin.get_next_disagg_decode_batch_to_run()
  SchedulerDisaggregationDecodeMixin.get_new_prebuilt_batch()
  SchedulerDisaggregationDecodeMixin.process_decode_queue()

# python/sglang/srt/disaggregation/decode_schedule_batch_mixin.py
  ScheduleBatchDisaggregationDecodeMixin.prepare_for_prebuilt_extend()
  ScheduleBatchDisaggregationDecodeMixin.process_prebuilt_extend(server_args, model_config)

# python/sglang/srt/disaggregation/kv_events.py
  EventPublisher.__init__(attn_dp_rank)
  EventPublisher.publish(events)
  EventPublisher.shutdown()
  NullEventPublisher.publish(events)
  NullEventPublisher.shutdown()
  ZmqEventPublisher.__init__(attn_dp_rank, endpoint, replay_endpoint, buffer_steps, hwm, max_queue_size, topic)
  ZmqEventPublisher.publish(events)
  ZmqEventPublisher.shutdown()
  ZmqEventPublisher.offset_endpoint_port(endpoint, data_parallel_rank)
  KVEventsConfig.from_cli(cls, cli_value)
  EventPublisherFactory.register_publisher(cls, name, ctor, EventPublisher])
  EventPublisherFactory.create(cls, config, attn_dp_rank)

# python/sglang/srt/disaggregation/launch_lb.py
  LBArgs.add_cli_args(parser)
  LBArgs.from_cli_args(cls, args)
  LBArgs.__post_init__()
main()

# python/sglang/srt/disaggregation/mini_lb.py
setup_logger()
  MiniLoadBalancer.__init__(prefill_configs, decode_servers, timeout)
  MiniLoadBalancer.add_prefill_server(new_prefill_config)
  MiniLoadBalancer.add_decode_server(new_decode_server)
  MiniLoadBalancer.select_pair()
  MiniLoadBalancer.generate(modified_request, prefill_server, decode_server, endpoint)
  MiniLoadBalancer.generate_stream(modified_request, prefill_server, decode_server, endpoint)
health_check()
health_check()
flush_cache()
get_server_info()
get_model_info()
handle_generate_request(request_data)
handle_chat_completion_request(request_data)
handle_completion_request(request_data)
get_models()
register(obj)
run(prefill_configs, decode_addrs, host, port, timeout)

# python/sglang/srt/disaggregation/prefill.py
  PrefillBootstrapQueue.__init__(token_to_kv_pool, draft_token_to_kv_pool, req_to_metadata_buffer_idx_allocator, metadata_buffers, tp_rank, tp_size, gpu_id, bootstrap_port, gloo_group, max_total_num_tokens, decode_tp_size, decode_dp_size, scheduler, pp_rank, pp_size, transfer_backend)
  PrefillBootstrapQueue.add(req, num_kv_heads)
  PrefillBootstrapQueue.extend(reqs, num_kv_heads)
  PrefillBootstrapQueue.pop_bootstrapped(return_failed_reqs, rids_to_check)
  SchedulerDisaggregationPrefillMixin.event_loop_normal_disagg_prefill()
  SchedulerDisaggregationPrefillMixin.event_loop_overlap_disagg_prefill()
  SchedulerDisaggregationPrefillMixin.process_batch_result_disagg_prefill(batch, result, launch_done)
  SchedulerDisaggregationPrefillMixin.process_disagg_prefill_inflight_queue(rids_to_check)
  SchedulerDisaggregationPrefillMixin.get_transferred_rids()
  SchedulerDisaggregationPrefillMixin.process_prefill_chunk()
  SchedulerDisaggregationPrefillMixin.send_kv_chunk(req, last_chunk, end_idx)
  SchedulerDisaggregationPrefillMixin.event_loop_pp_disagg_prefill()
  SchedulerDisaggregationPrefillMixin.send_pyobj_to_next_stage(data)
  SchedulerDisaggregationPrefillMixin.recv_pyobj_from_prev_stage()

# python/sglang/srt/disaggregation/utils.py
poll_and_all_reduce(pollers, gloo_group)
  ReqToMetadataIdxAllocator.__init__(size)
  ReqToMetadataIdxAllocator.available_size()
  ReqToMetadataIdxAllocator.alloc()
  ReqToMetadataIdxAllocator.free(free_index)
  MetadataBuffers.__init__(size, hidden_size, dtype, max_top_logprobs_num, custom_mem_pool)
  MetadataBuffers.get_buf_infos()
  MetadataBuffers.get_buf(idx)
  MetadataBuffers.set_buf(req)
get_kv_class(transfer_backend, class_type)
kv_to_page_indices(kv_indices, page_size)
kv_to_page_num(num_kv_indices, page_size)
  PDRegistryRequest.__post_init__()
register_disaggregation_server(mode, server_port, bootstrap_port, pdlb_url)
is_mla_backend(target_kv_pool)
prepare_abort(req, error_message, status_code)