================================================================================
FUNCTION INDEX: deep_gemm_wrapper module
================================================================================
Total Functions: 15
Documented: 0


============================================================
FILE: python/sglang/srt/layers/quantization/deep_gemm_wrapper/compile_utils.py
Functions: 10
============================================================

MODULE FUNCTIONS:
----------------------------------------
  L  42: def update_deep_gemm_config(gpu_id: int, server_args: ServerArgs)

  L 229: def deep_gemm_execution_hook(m: int,
        n: int,
        k: int,
        num_groups: int,
        kernel_type: DeepGemmKernelType)
         @contextmanager


CLASS: _BaseWarmupExecutor
----------------------------------------
  L 142: create(kernel_type: DeepGemmKernelType)

  L 149: execute(self, m)


CLASS: _GroupedContWarmupExecutor
----------------------------------------
  L 193: __init__(self, max_m: int, n: int, k: int, num_groups: int)

  L 199: execute(self, m)


CLASS: _GroupedMaskedWarmupExecutor
----------------------------------------
  L 209: __init__(self, max_m: int, n: int, k: int, num_groups: int)

  L 217: execute(self, m)


CLASS: _NormalWarmupExecutor
----------------------------------------
  L 179: __init__(self, max_m: int, n: int, k: int, num_groups: int)

  L 184: execute(self, m)


============================================================
FILE: python/sglang/srt/layers/quantization/deep_gemm_wrapper/entrypoint.py
Functions: 5
============================================================

MODULE FUNCTIONS:
----------------------------------------
  L  23: def grouped_gemm_nt_f8f8bf16_masked(lhs: Tuple[torch.Tensor,
        torch.Tensor],
        rhs: Tuple[torch.Tensor,
        torch.Tensor],
        out: torch.Tensor,
        masked_m: torch.Tensor,
        expected_m: int)

  L  46: def grouped_gemm_nt_f8f8bf16_contig(lhs: Tuple[torch.Tensor,
        torch.Tensor],
        rhs: Tuple[torch.Tensor,
        torch.Tensor],
        out: torch.Tensor,
        m_indices: torch.Tensor)

  L  60: def gemm_nt_f8f8bf16(lhs: Tuple[torch.Tensor,
        torch.Tensor],
        rhs: Tuple[torch.Tensor,
        torch.Tensor],
        out: torch.Tensor)

  L  78: def update_deep_gemm_config(gpu_id: int, server_args: ServerArgs)

  L  83: def configure_deep_gemm_num_sms(num_sms)
         @contextmanager
