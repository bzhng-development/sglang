================================================================================
FUNCTION INDEX: eplb module
================================================================================
Total Functions: 120
Documented: 7


============================================================
FILE: python/sglang/srt/eplb/eplb_manager.py
Functions: 3
============================================================


CLASS: EPLBManager
----------------------------------------
  L  17: __init__(self, model_runner: 'ModelRunner')

  L  41: on_forward_pass_end(self)

  L  52: rebalance(self)


============================================================
FILE: python/sglang/srt/eplb/expert_distribution.py
Functions: 91
============================================================

MODULE FUNCTIONS:
----------------------------------------
  L 266: def get_global_expert_distribution_recorder()

  L 270: def set_global_expert_distribution_recorder(value)

  L 925: def compute_gpu_physical_count(physical_count_of_whatever: torch.Tensor,
        num_gpu: int)
         üìù output: gpu_physical_count_of_batch (..., num_layer, num_gpu)

  L 938: def compute_utilization_rate(gpu_physical_count_of_batch: torch.Tensor)
         üìù output: utilization_rate (..., num_layer)


CLASS: ExpertDistributionRecorder
----------------------------------------
  L  44: init_new(server_args: ServerArgs, expert_location_metadata: 'ExpertLocationMetadata', rank: int)

  L  62: with_current_layer(self, layer_idx)

  L  66: with_debug_name(self, debug_name)

  L  70: disable_this_region(self)

  L  74: with_forward_pass(self, forward_pass_id: int, forward_batch: ForwardBatch)

  L  77: on_select_experts(self, topk_ids: torch.Tensor)

  L  80: on_deepep_dispatch_normal(self, local_physical_count_of_layer: List[int], num_tokens_per_rank, num_tokens_per_rdma_rank, num_tokens_per_expert)

  L  89: on_deepep_dispatch_low_latency(self, local_physical_count_of_layer: torch.Tensor)

  L  94: start_record(self)

  L  97: stop_record(self)

  L 100: dump_record(self, output_mode: _OutputMode)

  L 104: recording(self)


CLASS: _Accumulator
----------------------------------------
  L 562: init_new(server_args: ServerArgs, expert_location_metadata: 'ExpertLocationMetadata', rank: int)
         ‚Üí '_Accumulator'

  L 572: get_class(server_args: ServerArgs)
         ‚Üí Type['_Accumulator']

  L 580: __init__(self, server_args: ServerArgs, expert_location_metadata: 'ExpertLocationMetadata', rank: int)

  L 590: get_single_pass_gatherer_keys(self)

  L 593: get_single_pass_gatherer_key(self, debug_name: Optional[str])

  L 596: append(self, forward_pass_id: int, gatherer_key: str, single_pass_data: Dict)

  L 604: reset(self)

  L 607: dump(self, output_mode: _OutputMode)


CLASS: _Buffer
----------------------------------------
  L 839: init_new(item_shape: Tuple, buffer_size: int, dtype, device)

  L 845: append(self, value: torch.Tensor)

  L 848: get_all(self)
         ‚Üí torch.Tensor

  L 851: reset(self)


CLASS: _CircularBuffer
----------------------------------------
  L 856: __init__(self, item_shape: Tuple, buffer_size: int, dtype, device)

  L 862: append(self, value: torch.Tensor)

  L 866: get_all(self)
         ‚Üí torch.Tensor

  L 869: reset(self)


CLASS: _DeepepLowLatencySinglePassGatherer
----------------------------------------
  L 528: __init__(self)

  L 531: on_deepep_dispatch_low_latency(self, layer_idx: int, local_physical_count_of_layer: torch.Tensor)


CLASS: _DeepepNormalSinglePassGatherer
----------------------------------------
  L 495: __init__(self)

  L 503: on_deepep_dispatch_normal(self, layer_idx: int, local_physical_count_of_layer: List[int], num_tokens_per_rank, num_tokens_per_rdma_rank, num_tokens_per_expert)

  L 514: collect(self)
         ‚Üí Dict


CLASS: _DequeCollection
----------------------------------------
  L 669: __init__(self, maxlens: List[int])

  L 672: append(self, value)

  L 676: clear(self)

  L 680: mean(self)
         ‚Üí Dict[int, float]


CLASS: _DetailAccumulator
----------------------------------------
  L 685: __init__(self)

  L 689: get_single_pass_gatherer_keys(self)

  L 694: get_single_pass_gatherer_key(self, debug_name: Optional[str])

  L 699: append(self, forward_pass_id: int, gatherer_key: str, single_pass_data: Dict)

  L 725: reset(self)

  L 729: dump(self, output_mode: _OutputMode)


CLASS: _DetailSinglePassGatherer
----------------------------------------
  L 346: __init__(self, server_args: ServerArgs, expert_location_metadata: 'ExpertLocationMetadata', rank: int)

  L 370: on_forward_pass_start(self, forward_batch: ForwardBatch)

  L 381: on_select_experts(self, layer_idx: int, topk_ids: torch.Tensor)

  L 386: on_deepep_dispatch_normal(self, layer_idx: int, local_physical_count_of_layer: List[int], num_tokens_per_rank, num_tokens_per_rdma_rank, num_tokens_per_expert)

  L 403: reset(self)

  L 408: collect(self)
         ‚Üí Dict


CLASS: _ExpertDistributionRecorderReal
----------------------------------------
  L 118: __init__(self, server_args: ServerArgs, expert_location_metadata: 'ExpertLocationMetadata', rank: int)

  L 146: with_current_layer(self, layer_idx)

  L 149: with_debug_name(self, debug_name)

  L 153: with_forward_pass(self, forward_pass_id: int, forward_batch: ForwardBatch)

  L 162: disable_this_region(self)
         üìù Context manager to temporarily disable recording.

  L 185: on_select_experts(self, topk_ids: torch.Tensor)

  L 188: on_deepep_dispatch_normal(self, local_physical_count_of_layer: List[int], num_tokens_per_rank, num_tokens_per_rdma_rank, num_tokens_per_expert)

  L 203: on_deepep_dispatch_low_latency(self, local_physical_count_of_layer: torch.Tensor)

  L 233: start_record(self)
         üìù Start recording the expert distribution.

  L 242: stop_record(self)
         üìù Stop recording the expert distribution.

  L 250: dump_record(self, output_mode: _OutputMode)
         üìù Dump the expert distribution record and reset the recorder after dumping.

  L 257: recording(self)


CLASS: _InfiniteBuffer
----------------------------------------
  L 874: __init__(self, item_shape: Tuple, dtype, device)

  L 879: append(self, value: torch.Tensor)

  L 894: get_all(self)
         ‚Üí torch.Tensor

  L 897: reset(self)


CLASS: _LayerBasedCpuSinglePassGatherer
----------------------------------------
  L 418: __init__(self)

  L 431: reset(self)


CLASS: _LayerBasedGpuSinglePassGatherer
----------------------------------------
  L 447: __init__(self)

  L 463: reset(self)

  L 466: collect(self)
         ‚Üí Dict


CLASS: _SelectExpertsSinglePassGatherer
----------------------------------------
  L 482: __init__(self)

  L 486: on_select_experts(self, layer_idx: int, topk_ids: torch.Tensor)


CLASS: _SinglePassGatherer
----------------------------------------
  L 280: init_new(server_args: ServerArgs, expert_location_metadata: 'ExpertLocationMetadata', rank: int)
         ‚Üí '_SinglePassGatherer'

  L 310: __init__(self, expert_location_metadata: 'ExpertLocationMetadata', rank: int)

  L 314: on_forward_pass_start(self, forward_batch: ForwardBatch)

  L 317: on_select_experts(self, layer_idx: int, topk_ids: torch.Tensor)

  L 320: on_deepep_dispatch_normal(self, layer_idx: int, local_physical_count_of_layer: List[int], num_tokens_per_rank, num_tokens_per_rdma_rank, num_tokens_per_expert)

  L 330: on_deepep_dispatch_low_latency(self, layer_idx: int, local_physical_count_of_layer: torch.Tensor)

  L 335: reset(self)

  L 338: collect(self)
         ‚Üí Dict


CLASS: _StatAccumulator
----------------------------------------
  L 742: __init__(self)

  L 756: append(self, forward_pass_id: int, gatherer_key: str, single_pass_data: Dict)

  L 768: reset(self)

  L 772: dump(self, output_mode: _OutputMode)


CLASS: _UtilizationRateAccumulatorMixin
----------------------------------------
  L 612: __init__(self)

  L 622: append(self, forward_pass_id: int, gatherer_key: str, single_pass_data: Dict)

  L 634: reset(self)


============================================================
FILE: python/sglang/srt/eplb/expert_location.py
Functions: 16
============================================================

MODULE FUNCTIONS:
----------------------------------------
  L 289: def get_global_expert_location_metadata()

  L 293: def set_global_expert_location_metadata(value)

  L 337: def compute_logical_to_rank_dispatch_physical_map(logical_to_all_physical_map: torch.Tensor,
        num_gpus: int,
        num_physical_experts: int,
        ep_rank: int,
        seed: int)

  L 431: def compute_initial_expert_location_metadata(server_args: ServerArgs,
        model_config: ModelConfig)
         ‚Üí Optional[ExpertLocationMetadata]


CLASS: ExpertLocationMetadata
----------------------------------------
  L  46: num_layers(self)
         ‚Üí int

  L  50: num_physical_experts(self)
         ‚Üí int

  L  54: num_local_physical_experts(self)
         ‚Üí int

  L  60: num_logical_experts(self)
         ‚Üí int

  L  64: ep_size(self)

  L  68: __post_init__(self)

  L  83: init_trivial(server_args: ServerArgs, model_config: ModelConfig)
         üìù Trivial location - logical expert i corresponds to physical expert i

  L 107: init_by_mapping(server_args: ServerArgs, model_config: ModelConfig, physical_to_logical_map)

  L 135: init_by_eplb(server_args: ServerArgs, model_config: ModelConfig, logical_count: torch.Tensor)

  L 242: update(self, other: 'ExpertLocationMetadata', update_layer_ids: List[int])

  L 273: logical_to_all_physical(self, layer_id: int, logical_expert_id: int)
         ‚Üí List[int]


CLASS: ModelConfigForExpertLocation
----------------------------------------
  L 421: from_model_config(model_config: ModelConfig)


============================================================
FILE: python/sglang/srt/eplb/expert_location_dispatch.py
Functions: 3
============================================================

MODULE FUNCTIONS:
----------------------------------------
  L  64: def transform_select_experts_inputs(router_logits: torch.Tensor,
        correction_bias: Optional[torch.Tensor],
        info: Optional[ExpertLocationDispatchInfo])

  L  76: def topk_ids_logical_to_physical(topk_ids: torch.Tensor,
        info: Optional[ExpertLocationDispatchInfo])
         ‚Üí torch.Tensor


CLASS: ExpertLocationDispatchInfo
----------------------------------------
  L  36: init_new(cls, layer_id: int)


============================================================
FILE: python/sglang/srt/eplb/expert_location_updater.py
Functions: 7
============================================================

MODULE FUNCTIONS:
----------------------------------------
  L 160: def create_temp_buffers(sample_tensors)

  L 164: def update_expert_weights_single_layer(routed_experts_weights: List[torch.Tensor],
        temp_buffers: List[torch.Tensor],
        old_physical_to_logical_map: List[int],
        new_physical_to_logical_map: List[int],
        num_local_physical_experts: int,
        num_gpu_per_node: int,
        rank: int,
        world_size: Optional[int],
        debug: bool,
        log_metrics: bool)


CLASS: ExpertLocationUpdater
----------------------------------------
  L  37: __init__(self)

  L  40: update(self, routed_experts_weights_of_layer: Dict[int, List[torch.Tensor]], new_expert_location_metadata: ExpertLocationMetadata, update_layer_ids: List[int], nnodes: int, rank: int)


CLASS: _ChunkUtils
----------------------------------------
  L 474: __init__(self)

  L 478: chunk_value_from_element_value(self, element_value)

  L 486: element_values_from_chunk_value(self, chunk_value)
         ‚Üí List
