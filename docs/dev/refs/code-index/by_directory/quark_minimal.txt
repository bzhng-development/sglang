
# python/sglang/srt/layers/quantization/quark/quark.py
  QuarkConfig.__init__(quant_config, Any], kv_cache_group, kv_cache_config, Any]], pack_method)
  QuarkConfig.get_linear_method()
  QuarkConfig.get_supported_act_dtypes(cls)
  QuarkConfig.get_min_capability(cls)
  QuarkConfig.get_name()
  QuarkConfig.get_quant_method(layer, prefix)
  QuarkConfig.from_config(cls, config, Any])
  QuarkConfig.get_config_filenames(cls)
  QuarkConfig.get_scheme(layer, layer_name)
  QuarkConfig.get_scaled_act_names()
  QuarkLinearMethod.__init__(quantization_config)
  QuarkLinearMethod.process_weights_after_loading(layer)
  QuarkLinearMethod.create_weights(layer, input_size_per_partition, output_partition_sizes, input_size, output_size, params_dtype)
  QuarkLinearMethod.apply(layer, x, bias)
  QuarkKVCacheMethod.__init__(quant_config)
  QuarkKVCacheMethod.validate_kv_cache_config(kv_cache_config, Any]])

# python/sglang/srt/layers/quantization/quark/quark_moe.py
  QuarkMoEMethod.__new__(cls)
  QuarkMoEMethod.get_moe_method(quant_config, module, layer_name)
  QuarkW4A4MXFp4MoEMethod.__init__(weight_config, Any], input_config, Any])
  QuarkW4A4MXFp4MoEMethod.create_weights(layer, num_experts, hidden_size, intermediate_size_per_partition, params_dtype)
  QuarkW4A4MXFp4MoEMethod.process_weights_after_loading(layer)
  QuarkW4A4MXFp4MoEMethod.apply(layer, x, topk_output, moe_runner_config)

# python/sglang/srt/layers/quantization/quark/utils.py
deep_compare(dict1, dict2)
should_ignore_layer(layer_name, ignore, fused_mapping, list[str]])
check_equal_or_regex_match(layer_name, targets)