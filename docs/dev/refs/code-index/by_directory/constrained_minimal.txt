
# python/sglang/srt/constrained/base_grammar_backend.py
  BaseGrammarObject.__init__()
  BaseGrammarObject.accept_token(token)
  BaseGrammarObject.rollback(k)
  BaseGrammarObject.is_terminated()
  BaseGrammarObject.allocate_vocab_mask(vocab_size, batch_size, device)
  BaseGrammarObject.fill_vocab_mask(vocab_mask, idx)
  BaseGrammarObject.move_vocab_mask(vocab_mask, device)
  BaseGrammarObject.apply_vocab_mask(logits, vocab_mask)
  BaseGrammarObject.copy()
  BaseGrammarObject.finished()
  BaseGrammarObject.finished(finished)
  BaseGrammarObject.try_jump_forward(tokenizer)
  BaseGrammarObject.jump_forward_str_state(helper, str])
  BaseGrammarObject.jump_and_retokenize(old_output_ids, new_output_ids, next_state)
  BaseGrammarBackend.__init__()
  BaseGrammarBackend.dispatch_fallback(key_type, key_string)
  BaseGrammarBackend.dispatch_json(key_string)
  BaseGrammarBackend.dispatch_regex(key_string)
  BaseGrammarBackend.dispatch_ebnf(key_string)
  BaseGrammarBackend.dispatch_structural_tag(key_string)
  BaseGrammarBackend.get_cached_or_future_value(key, str])
  BaseGrammarBackend.set_cache(key, str], value)
  BaseGrammarBackend.reset()
create_grammar_backend(server_args, tokenizer, vocab_size, eos_token_ids)

# python/sglang/srt/constrained/llguidance_backend.py
  GuidanceGrammar.__init__(llguidance_tokenizer, serialized_grammar)
  GuidanceGrammar.accept_token(token)
  GuidanceGrammar.fill_vocab_mask(vocab_mask, idx)
  GuidanceGrammar.allocate_vocab_mask(vocab_size, batch_size, device)
  GuidanceGrammar.move_vocab_mask(vocab_mask, device)
  GuidanceGrammar.apply_vocab_mask(logits, vocab_mask)
  GuidanceGrammar.copy()
  GuidanceGrammar.try_jump_forward(tokenizer)
  GuidanceGrammar.jump_forward_str_state(helper, str])
  GuidanceGrammar.jump_and_retokenize(old_output_ids, new_output_ids, next_state)
  GuidanceBackend.__init__(tokenizer, whitespace_pattern, n_vocab)
  GuidanceBackend.dispatch_json(key_string)
  GuidanceBackend.dispatch_regex(key_string)
  GuidanceBackend.dispatch_ebnf(key_string)
  GuidanceBackend.dispatch_structural_tag(key_string)

# python/sglang/srt/constrained/outlines_backend.py
  OutlinesGrammar.__init__(guide, jump_forward_map, None])
  OutlinesGrammar.accept_token(token)
  OutlinesGrammar.allocate_vocab_mask(vocab_size, batch_size, device)
  OutlinesGrammar.move_vocab_mask(vocab_mask, device)
  OutlinesGrammar.fill_vocab_mask(vocab_mask, idx)
  OutlinesGrammar.apply_vocab_mask(logits, vocab_mask)
  OutlinesGrammar.copy()
  OutlinesGrammar.try_jump_forward(tokenizer)
  OutlinesGrammar.jump_forward_str_state(helper, str])
  OutlinesGrammar.jump_and_retokenize(old_output_ids, new_output_ids, next_state)
  OutlinesGrammarBackend.__init__(tokenizer, whitespace_pattern)
  OutlinesGrammarBackend.dispatch_ebnf(key_string)
  OutlinesGrammarBackend.dispatch_structural_tag(key_string)
  OutlinesGrammarBackend.dispatch_json(key_string)
  OutlinesGrammarBackend.dispatch_regex(key_string)
build_regex_from_object(object, BaseModel, Dict], whitespace_pattern)

# python/sglang/srt/constrained/outlines_jump_forward.py
disk_cache(expire, typed, ignore)
init_state_to_jump_forward(regex_string)
  OutlinesJumpForwardMap.__init__(regex_string)
  OutlinesJumpForwardMap.jump_forward_symbol(state)
  OutlinesJumpForwardMap.jump_forward_byte(state)
  OutlinesJumpForwardMap.is_jump_forward_symbol_state(state)
test_main(regex_string)

# python/sglang/srt/constrained/reasoner_grammar_backend.py
  ReasonerGrammarObject.__init__(grammar, think_end_id)
  ReasonerGrammarObject.accept_token(token)
  ReasonerGrammarObject.allocate_vocab_mask(vocab_size, batch_size, device)
  ReasonerGrammarObject.fill_vocab_mask(vocab_mask, idx)
  ReasonerGrammarObject.move_vocab_mask(vocab_mask, device)
  ReasonerGrammarObject.apply_vocab_mask()
  ReasonerGrammarObject.copy()
  ReasonerGrammarObject.finished()
  ReasonerGrammarObject.finished(finished)
  ReasonerGrammarObject.try_jump_forward(tokenizer)
  ReasonerGrammarObject.jump_forward_str_state(helper)
  ReasonerGrammarObject.jump_and_retokenize(old_output_ids, new_output_ids, next_state)
  ReasonerGrammarBackend.__init__(grammar_backend, think_end_id)

# python/sglang/srt/constrained/xgrammar_backend.py
  XGrammarGrammar.__init__(matcher, vocab_size, ctx, override_stop_tokens, int]], key_string)
  XGrammarGrammar.accept_token(token)
  XGrammarGrammar.rollback(k)
  XGrammarGrammar.is_terminated()
  XGrammarGrammar.allocate_vocab_mask(vocab_size, batch_size, device)
  XGrammarGrammar.fill_vocab_mask(vocab_mask, idx)
  XGrammarGrammar.move_vocab_mask(vocab_mask, device)
  XGrammarGrammar.apply_vocab_mask(logits, vocab_mask)
  XGrammarGrammar.copy()
  XGrammarGrammar.try_jump_forward(tokenizer)
  XGrammarGrammar.jump_forward_str_state(helper, str])
  XGrammarGrammar.jump_and_retokenize(old_output_ids, new_output_ids, next_state)
  XGrammarGrammar.__repr__()
  XGrammarGrammarBackend.__init__(tokenizer, vocab_size, model_eos_token_ids)
  XGrammarGrammarBackend.dispatch_json(key_string)
  XGrammarGrammarBackend.dispatch_ebnf(key_string)
  XGrammarGrammarBackend.dispatch_regex(key_string)
  XGrammarGrammarBackend.dispatch_structural_tag(key_string)
  XGrammarGrammarBackend.reset()