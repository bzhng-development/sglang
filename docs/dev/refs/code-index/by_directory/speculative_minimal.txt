
# python/sglang/srt/speculative/build_eagle_tree.py
build_tree_kernel_efficient_preprocess(verified_id, score_list, token_list, parents_list, num_verify_tokens)
build_tree_kernel_efficient(verified_id, score_list, token_list, parents_list, seq_lens, seq_lens_sum, topk, spec_steps, num_verify_tokens, tree_mask_mode, tree_mask_buf, position_buf)
test_build_tree_kernel_efficient()

# python/sglang/srt/speculative/eagle_draft_cuda_graph_runner.py
  EAGLEDraftCudaGraphRunner.__init__(eagle_worker)
  EAGLEDraftCudaGraphRunner.can_run(forward_batch)
  EAGLEDraftCudaGraphRunner.capture()
  EAGLEDraftCudaGraphRunner.capture_one_batch_size(num_seqs, forward)
  EAGLEDraftCudaGraphRunner.replay(forward_batch)

# python/sglang/srt/speculative/eagle_draft_extend_cuda_graph_runner.py
  EAGLEDraftExtendCudaGraphRunner.__init__(eagle_worker)
  EAGLEDraftExtendCudaGraphRunner.can_run(forward_batch)
  EAGLEDraftExtendCudaGraphRunner.capture()
  EAGLEDraftExtendCudaGraphRunner.capture_one_batch_size(bs, forward)
  EAGLEDraftExtendCudaGraphRunner.replay(forward_batch)

# python/sglang/srt/speculative/eagle_utils.py
  EagleDraftInput.prepare_for_extend(batch)
  EagleDraftInput.create_idle_input(cls, device, hidden_size, dtype, topk, capture_hidden_mode)
  EagleDraftInput.prepare_extend_after_decode(batch, speculative_num_steps)
  EagleDraftInput.generate_attn_arg_prefill(req_pool_indices, paged_kernel_lens, paged_kernel_lens_sum, req_to_token)
  EagleDraftInput.filter_batch(new_indices, has_been_filtered)
  EagleDraftInput.merge_batch(spec_info)
  EagleVerifyInput.create_idle_input(cls, topk, spec_steps, num_verify_tokens)
  EagleVerifyInput.prepare_for_verify(batch, page_size)
  EagleVerifyInput.generate_attn_arg_prefill(req_pool_indices, paged_kernel_lens, paged_kernel_lens_sum, req_to_token)
  EagleVerifyInput.verify(batch, logits_output, token_to_kv_pool_allocator, page_size, vocab_mask)
create_extend_after_decode_spec_info(verified_id, seq_lens, accept_lens, positions, new_verified_id, bs_upper)
assign_req_to_token_pool(req_pool_indices, req_to_token, start_offset, end_offset, out_cache_loc, pool_len, bs_upper)
assign_draft_cache_locs(req_pool_indices, req_to_token, seq_lens, extend_lens, num_new_pages_per_topk, out_cache_loc, pool_len, topk, speculative_num_steps, page_size, bs_upper, iter_upper)
generate_draft_decode_kv_indices(req_pool_indices, req_to_token, paged_kernel_lens, kv_indices, kv_indptr, positions, pool_len, kv_indices_stride, kv_indptr_stride, bs_upper, iter_upper, num_tokens_upper, page_size)
align_evict_mask_to_page_size(seq_lens, evict_mask, page_size, num_draft_tokens, BLOCK_SIZE)
get_target_cache_loc(tgt_cache_loc, to_free_slots, accept_length, to_free_num_slots, out_cache_loc, num_verify_tokens, num_verify_tokens_upper, bs_upper)
get_src_tgt_cache_loc(seq_lens, out_cache_loc, accept_index, accept_length, draft_token_num, page_size)
filter_finished_cache_loc_kernel(out_cache_loc, tgt_cache_loc, accept_length, accept_length_filter, bs_upper, num_verify_tokens_upper)
create_accept_length_filter(accept_length, unfinished_index_device, seq_lens)
select_top_k_tokens(i, topk_p, topk_index, hidden_states, scores, topk)
traverse_tree(retrieve_next_token, retrieve_next_sibling, draft_tokens, grammar, allocate_token_bitmask)
generate_token_bitmask(reqs, verify_input, retrieve_next_token_cpu, retrieve_next_sibling_cpu, draft_tokens_cpu, vocab_size)

# python/sglang/srt/speculative/eagle_worker.py
draft_tp_context(tp_group)
  EAGLEWorker.__init__(server_args, gpu_id, tp_rank, dp_rank, moe_ep_rank, nccl_port, target_worker)
  EAGLEWorker.init_attention_backend()
  EAGLEWorker.init_cuda_graphs()
  EAGLEWorker.draft_model_runner()
  EAGLEWorker.forward_batch_speculative_generation(batch)
  EAGLEWorker.check_forward_draft_extend_after_decode(batch)
  EAGLEWorker.forward_target_extend(batch)
  EAGLEWorker.draft(batch)
  EAGLEWorker.draft_forward(forward_batch)
  EAGLEWorker.verify(batch, spec_info)
  EAGLEWorker.add_logprob_values(batch, res, logits_output)
  EAGLEWorker.forward_draft_extend(batch, hidden_states, next_token_ids, seq_lens_cpu)
  EAGLEWorker.forward_draft_extend_after_decode(batch)
  EAGLEWorker.capture_for_decode(logits_output, draft_input)
load_token_map(token_map_path)
get_last_loc_large_page_size_top_k_1(req_to_token, req_pool_indices, seq_lens, speculative_num_steps)
get_last_loc_large_page_size_large_top_k(req_to_token, req_pool_indices, seq_lens, speculative_num_steps, topk, page_size)

# python/sglang/srt/speculative/spec_info.py
  SpeculativeAlgorithm.is_none()
  SpeculativeAlgorithm.is_eagle()
  SpeculativeAlgorithm.is_eagle3()
  SpeculativeAlgorithm.from_string(name)