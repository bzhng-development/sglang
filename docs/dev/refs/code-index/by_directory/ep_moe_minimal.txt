
# python/sglang/srt/layers/moe/ep_moe/kernels.py
deepep_permute_triton_kernel(input_ptr, gateup_input_ptr, src2dst_ptr, topk_ids_ptr, a1_scales_ptr, topk, hidden_size, BLOCK_SIZE)
deepep_post_reorder_triton_kernel(down_output_ptr, output_ptr, src2dst_ptr, topk_ids_ptr, topk_weights_ptr, topk, hidden_size, BLOCK_SIZE)
compute_src2dst_triton_kernel(reorder_ids, src2dst, num_toks, BLOCK_SIZE)
deepep_compute_src2dst_triton_kernel(reorder_ids, src2dst, num_toks, num_minus_one, BLOCK_SIZE)
deepep_run_moe_deep_preprocess(topk_ids, num_experts)
compute_seg_indptr_triton_kernel(reorder_topk_ids, seg_indptr, num_toks)
run_moe_ep_preproess(topk_ids, num_experts)
run_cutlass_moe_ep_preproess(local_topk_ids, local_num_experts)
pre_reorder_triton_kernel_for_cutlass_moe(input_ptr, gateup_input_ptr, src2dst_ptr, topk_ids_ptr, a1_scales_ptr, num_experts, topk, hidden_size, BLOCK_SIZE)
pre_reorder_triton_kernel(input_ptr, gateup_input_ptr, src2dst_ptr, topk_ids_ptr, a1_scales_ptr, start_expert_id, end_expert_id, topk, hidden_size, BLOCK_SIZE, use_per_token_if_dynamic)
silu_and_mul_triton_kernel(gateup_output, down_input, hidden_size, reorder_topk_ids, scales, start_expert_id, end_expert_id, BLOCK_SIZE)
silu_and_mul_masked_post_quant_fwd(input, output, output_scale, quant_group_size, masked_m, scale_ue8m0)
tanh(x)
gelu_and_mul_triton_kernel(gateup_output, down_input, hidden_size, reorder_topk_ids, scales, start_expert_id, end_expert_id, BLOCK_SIZE)
post_reorder_triton_kernel(down_output_ptr, output_ptr, src2dst_ptr, topk_ids_ptr, topk_weights_ptr, start_expert_id, end_expert_id, topk, hidden_size, dst_start, BLOCK_SIZE)
post_reorder_triton_kernel_for_cutlass_moe(down_output_ptr, output_ptr, src2dst_ptr, topk_ids_ptr, topk_weights_ptr, num_experts, topk, hidden_size, dst_start, BLOCK_SIZE)
compute_m_range(pid, batch_size, seg_indptr, weight_indices, m_num_tiles_indptr, BLOCK_SIZE_M)
grouped_gemm_triton_kernel(a, b, c, batch_size, N, K, seg_indptr, weight_indices, m_num_tiles_indptr, scale_a, scale_b, use_fp8_w8a8, group_n, group_k, a_stride_0, b_stride_0, b_stride_1, as_stride_0, as_stride_1, bs_stride_0, bs_stride_2, bs_stride_1, use_per_token_if_dynamic, BLOCK_SIZE_M, BLOCK_SIZE_N, BLOCK_SIZE_K)
compute_m_num_tiles_indptr(m_num_tiles_indptr, seg_indptr, batch_size, BLOCK_SIZE_M)
grouped_gemm_triton(a, b, c, batch_size, weight_column_major, seg_indptr, weight_indices, use_fp8_w8a8, scale_a, scale_b, block_shape, c_dtype, use_per_token_if_dynamic)
ep_scatter(recv_x, recv_x_scale, recv_topk, num_recv_tokens_per_expert, expert_start_loc, output_tensor, output_tensor_scale, m_indices, output_index, scale_ue8m0)
ep_gather(input_tensor, recv_topk_ids, recv_topk_weight, input_index, output_tensor)
get_tma_aligned_size(x, element_size)
tma_align_input_scale(input_scale)
compute_masked_m_triton_kernel(seg_indptr, masked_m)
deepgemm_compute_src2dst_triton_kernel(topk_ids, reorder_ids, seg_indptr, src2dst, m_max, num_toks, BLOCK_SIZE)
fill_gateup_input_triton_kernel(input_ptr, scale_ptr, gateup_input_ptr, gateup_input_scale_ptr, src2dst_ptr, topk_ids_ptr, start_expert_id, end_expert_id, topk, m_max, hidden_size, scale_size, BLOCK_SIZE)
moe_ep_deepgemm_preprocess(topk_ids, num_experts, hidden_states, top_k, start_expert_id, end_expert_id, block_shape, output_dtype)

# python/sglang/srt/layers/moe/ep_moe/layer.py
  EPMoE.__init__(num_experts, top_k, hidden_size, intermediate_size, layer_id, num_fused_shared_experts, params_dtype, quant_config, prefix, activation, routed_scaling_factor, gemm1_alpha, gemm1_clamp_limit, with_bias)
  EPMoE.forward(hidden_states, topk_output)
  EPMoE.forward_deepgemm(hidden_states, topk_output)
  DeepEPMoE.__init__(num_experts, top_k, hidden_size, intermediate_size, layer_id, num_fused_shared_experts, params_dtype, quant_config, prefix, activation, routed_scaling_factor)
  DeepEPMoE.forward(hidden_states, topk_idx, topk_weights, forward_batch)
  DeepEPMoE.dispatch(hidden_states, topk_idx, topk_weights, forward_batch)
  DeepEPMoE.moe_impl(dispatch_output)
  DeepEPMoE.combine(hidden_states, topk_idx, topk_weights, forward_batch)
  DeepEPMoE.forward_aiter(dispatch_output, DeepEPLLOutput])
  DeepEPMoE.forward_deepgemm_contiguous(dispatch_output)
  DeepEPMoE.forward_deepgemm_masked(dispatch_output)
  DeepEPMoE.forward_npu(dispatch_output)
get_moe_impl_class(quant_config)