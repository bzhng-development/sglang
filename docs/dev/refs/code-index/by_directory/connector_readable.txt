================================================================================
FUNCTION INDEX: connector module
================================================================================
Total Functions: 33
Documented: 3


============================================================
FILE: python/sglang/srt/connector/__init__.py
Functions: 2
============================================================

MODULE FUNCTIONS:
----------------------------------------
  L  23: def create_remote_connector(url, device)
         ‚Üí BaseConnector

  L  33: def get_connector_type(client: BaseConnector)
         ‚Üí ConnectorType


============================================================
FILE: python/sglang/srt/connector/base_connector.py
Functions: 14
============================================================


CLASS: BaseConnector
----------------------------------------
  L  23: __init__(self, url: str, device: torch.device)

  L  32: get_local_dir(self)

  L  36: weight_iterator(self, rank: int)
         ‚Üí Generator[Tuple[str, torch.Tensor], None, None]

  L  42: pull_files(self, allow_pattern: Optional[List[str]], ignore_pattern: Optional[List[str]])
         ‚Üí None

  L  49: close(self)

  L  57: __enter__(self)

  L  60: __exit__(self, exc_type, exc_value, traceback)

  L  63: __del__(self)


CLASS: BaseFileConnector
----------------------------------------
  L 111: glob(self, allow_pattern: str)
         ‚Üí List[str]


CLASS: BaseKVConnector
----------------------------------------
  L  79: get(self, key: str)
         ‚Üí Optional[torch.Tensor]

  L  83: getstr(self, key: str)
         ‚Üí Optional[str]

  L  87: set(self, key: str, obj: torch.Tensor)
         ‚Üí None

  L  91: setstr(self, key: str, obj: str)
         ‚Üí None

  L  95: list(self, prefix: str)
         ‚Üí List[str]


============================================================
FILE: python/sglang/srt/connector/redis.py
Functions: 9
============================================================


CLASS: RedisConnector
----------------------------------------
  L  18: __init__(self, url: str, device: torch.device)

  L  28: get(self, key: str)
         ‚Üí Optional[torch.Tensor]

  L  37: getstr(self, key: str)
         ‚Üí Optional[str]

  L  45: set(self, key: str, tensor: torch.Tensor)
         ‚Üí None

  L  49: setstr(self, key: str, obj: str)
         ‚Üí None

  L  52: list(self, prefix: str)
         ‚Üí List[str]

  L  67: weight_iterator(self, rank: int)
         ‚Üí Generator[Tuple[str, bytes], None, None]

  L  76: pull_files(self, allow_pattern: Optional[List[str]], ignore_pattern: Optional[List[str]])
         ‚Üí None

  L  83: close(self)


============================================================
FILE: python/sglang/srt/connector/s3.py
Functions: 6
============================================================

MODULE FUNCTIONS:
----------------------------------------
  L  29: def list_files(s3,
        path: str,
        allow_pattern: Optional[list[str]],
        ignore_pattern: Optional[list[str]])
         ‚Üí tuple[str, str, list[str]]
         üìù List files from S3 path and filter by pattern.


CLASS: S3Connector
----------------------------------------
  L  71: __init__(self, url: str)
         ‚Üí None

  L  77: glob(self, allow_pattern: Optional[list[str]])
         ‚Üí list[str]

  L  83: pull_files(self, allow_pattern: Optional[list[str]], ignore_pattern: Optional[list[str]])
         ‚Üí None
         üìù Pull files from S3 storage into the temporary directory.

  L 109: weight_iterator(self, rank: int)
         ‚Üí Generator[Tuple[str, torch.Tensor], None, None]

  L 120: close(self)


============================================================
FILE: python/sglang/srt/connector/utils.py
Functions: 2
============================================================

MODULE FUNCTIONS:
----------------------------------------
  L  11: def parse_model_name(url: str)
         ‚Üí str
         üìù Parse the model name from the url.

  L  20: def pull_files_from_db(connector: BaseConnector,
        model_name: str,
        allow_pattern: Optional[list[str]],
        ignore_pattern: Optional[list[str]])
         ‚Üí None
