
# python/sglang/srt/mem_cache/allocator.py
  BaseTokenToKVPoolAllocator.__init__(size, page_size, dtype, device, kvcache, need_sort)
  BaseTokenToKVPoolAllocator.debug_print()
  BaseTokenToKVPoolAllocator.available_size()
  BaseTokenToKVPoolAllocator.get_kvcache()
  BaseTokenToKVPoolAllocator.restore_state(state)
  BaseTokenToKVPoolAllocator.backup_state()
  BaseTokenToKVPoolAllocator.free_group_begin()
  BaseTokenToKVPoolAllocator.free_group_end()
  BaseTokenToKVPoolAllocator.merge_and_sort_free()
  BaseTokenToKVPoolAllocator.get_cpu_copy()
  BaseTokenToKVPoolAllocator.load_cpu_copy()
  BaseTokenToKVPoolAllocator.alloc_extend()
  BaseTokenToKVPoolAllocator.alloc_decode()
  BaseTokenToKVPoolAllocator.clear()
  BaseTokenToKVPoolAllocator.alloc(need_size)
  BaseTokenToKVPoolAllocator.free(free_index)
  TokenToKVPoolAllocator.__init__(size, dtype, device, kvcache, need_sort)
  TokenToKVPoolAllocator.clear()
  TokenToKVPoolAllocator.available_size()
  TokenToKVPoolAllocator.alloc(need_size)
  TokenToKVPoolAllocator.free(free_index)
  TokenToKVPoolAllocator.get_cpu_copy(indices)
  TokenToKVPoolAllocator.load_cpu_copy(kv_cache_cpu, indices)
  SWATokenToKVPoolAllocator.__init__(size, size_swa, dtype, device, kvcache, need_sort)
  SWATokenToKVPoolAllocator.available_size()
  SWATokenToKVPoolAllocator.full_available_size()
  SWATokenToKVPoolAllocator.swa_available_size()
  SWATokenToKVPoolAllocator.size_full()
  SWATokenToKVPoolAllocator.size_swa()
  SWATokenToKVPoolAllocator.debug_print()
  SWATokenToKVPoolAllocator.get_kvcache()
  SWATokenToKVPoolAllocator.translate_loc_from_full_to_swa(kv_indices)
  SWATokenToKVPoolAllocator.alloc(need_size)
  SWATokenToKVPoolAllocator.free(free_index)
  SWATokenToKVPoolAllocator.free_swa(free_index)
  SWATokenToKVPoolAllocator.backup_state()
  SWATokenToKVPoolAllocator.restore_state(state)
  SWATokenToKVPoolAllocator.clear()
alloc_extend_kernel(pre_lens_ptr, seq_lens_ptr, last_loc_ptr, free_page_ptr, out_indices, ret_values, bs_upper, page_size, max_num_extend_tokens)
alloc_decode_kernel(seq_lens_ptr, last_loc_ptr, free_page_ptr, out_indices, ret_values, bs_upper, page_size)
  PagedTokenToKVPoolAllocator.__init__(size, page_size, dtype, device, kvcache, need_sort)
  PagedTokenToKVPoolAllocator.alloc(need_size)
  PagedTokenToKVPoolAllocator.alloc_extend(prefix_lens, seq_lens, last_loc, extend_num_tokens)
  PagedTokenToKVPoolAllocator.alloc_decode(seq_lens, last_loc)
  PagedTokenToKVPoolAllocator.free(free_index)
  PagedTokenToKVPoolAllocator.clear()
  PagedTokenToKVPoolAllocator.get_cpu_copy(indices)
  PagedTokenToKVPoolAllocator.load_cpu_copy(kv_cache_cpu, indices)

# python/sglang/srt/mem_cache/allocator_ascend.py
alloc_extend_kernel_ascend(prefix_lens, seq_lens, last_loc, free_pages, out_indices, page_size, device)
  AscendPagedTokenToKVPoolAllocator.alloc_extend(prefix_lens, seq_lens, last_loc, extend_num_tokens)
  AscendPagedTokenToKVPoolAllocator.alloc_decode(seq_lens, last_loc)

# python/sglang/srt/mem_cache/base_prefix_cache.py
  BasePrefixCache.reset()
  BasePrefixCache.match_prefix(key)
  BasePrefixCache.cache_finished_req(req)
  BasePrefixCache.cache_unfinished_req(req)
  BasePrefixCache.evict(num_tokens)
  BasePrefixCache.inc_lock_ref(node)
  BasePrefixCache.dec_lock_ref(node, swa_uuid_for_lock)
  BasePrefixCache.evictable_size()
  BasePrefixCache.full_evictable_size()
  BasePrefixCache.swa_evictable_size()
  BasePrefixCache.protected_size()
  BasePrefixCache.full_protected_size()
  BasePrefixCache.swa_protected_size()
  BasePrefixCache.total_size()
  BasePrefixCache.pretty_print()
  BasePrefixCache.init_load_back(last_host_node, host_hit_length)
  BasePrefixCache.ready_to_load_host_cache()
  BasePrefixCache.check_hicache_events()
  BasePrefixCache.take_events()

# python/sglang/srt/mem_cache/chunk_cache.py
  ChunkCache.__init__(req_to_token_pool, token_to_kv_pool_allocator, page_size)
  ChunkCache.reset()
  ChunkCache.match_prefix()
  ChunkCache.cache_finished_req(req)
  ChunkCache.cache_unfinished_req(req)
  ChunkCache.evict(num_tokens)
  ChunkCache.inc_lock_ref(node)
  ChunkCache.dec_lock_ref(node, swa_uuid_for_lock)
  ChunkCache.pretty_print()
  SWAChunkCache.__init__(req_to_token_pool, token_to_kv_pool_allocator, page_size)
  SWAChunkCache.evict_swa(req, prelen, attention_chunk_size)
  SWAChunkCache.evict(num_tokens)

# python/sglang/srt/mem_cache/hicache_storage.py
get_hash_str(token_ids, prior_hash)
  HiCacheStorage.get(key, target_location, target_sizes)
  HiCacheStorage.batch_get(keys, target_locations, target_sizes)
  HiCacheStorage.set(key, value, target_location, target_sizes)
  HiCacheStorage.batch_set(keys, values, target_locations, target_sizes)
  HiCacheStorage.exists(key)
  HiCacheStorage.batch_exists(keys)
  HiCacheFile.__init__(storage_config, file_path)
  HiCacheFile.get(key, target_location, target_sizes)
  HiCacheFile.batch_get(keys, target_locations, target_sizes)
  HiCacheFile.set(key, value, target_location, target_sizes)
  HiCacheFile.batch_set(keys, values, target_locations, target_sizes)
  HiCacheFile.exists(key)
  HiCacheFile.delete(key)
  HiCacheFile.clear()

# python/sglang/srt/mem_cache/hiradix_cache.py
  HiRadixCache.__init__(req_to_token_pool, token_to_kv_pool_allocator, tp_cache_group, page_size, hicache_ratio, hicache_size, hicache_write_policy, hicache_io_backend, hicache_mem_layout, hicache_storage_backend, hicache_storage_prefetch_policy, model_name, storage_backend_extra_config)
  HiRadixCache.reset()
  HiRadixCache.get_height(node)
  HiRadixCache.write_backup(node, write_back)
  HiRadixCache.write_backup_storage(node)
  HiRadixCache.inc_hit_count(node)
  HiRadixCache.writing_check(write_back)
  HiRadixCache.loading_check()
  HiRadixCache.evictable_size()
  HiRadixCache.evict(num_tokens)
  HiRadixCache.evict_host(num_tokens)
  HiRadixCache.load_back(node, mem_quota)
  HiRadixCache.init_load_back(last_node, host_hit_length, mem_quota)
  HiRadixCache.ready_to_load_host_cache()
  HiRadixCache.check_hicache_events()
  HiRadixCache.check_revoked_prefetch()
  HiRadixCache.check_backup_progress()
  HiRadixCache.can_terminate_prefetch(operation)
  HiRadixCache.check_prefetch_progress(req_id)
  HiRadixCache.match_prefix(key)
  HiRadixCache.prefetch_from_storage(req_id, last_host_node, new_input_tokens, last_hash)

# python/sglang/srt/mem_cache/lora_radix_cache.py
  LoRAKey.__init__(lora_id, token_ids)
  LoRAKey.__len__()
get_child_key(key)
  LoRATreeNode.__init__(id)
  LoRATreeNode.evicted()
  LoRATreeNode.__lt__(other)
  LoRARadixCache.__init__(req_to_token_pool, token_to_kv_pool_allocator, page_size, disable)
  LoRARadixCache.reset()
  LoRARadixCache.match_prefix(key)
  LoRARadixCache.match_prefix_with_lora_id(key)
  LoRARadixCache.insert(key, value)
  LoRARadixCache.cache_finished_req(req)
  LoRARadixCache.cache_unfinished_req(req)
  LoRARadixCache.pretty_print()
  LoRARadixCache.total_size()
  LoRARadixCache.evict(num_tokens)
  LoRARadixCache.inc_lock_ref(node)
  LoRARadixCache.dec_lock_ref(node)
  LoRARadixCache.evictable_size()
  LoRARadixCache.protected_size()
  LoRARadixCache.all_values_flatten()

# python/sglang/srt/mem_cache/memory_pool.py
  ReqToTokenPool.__init__(size, max_context_len, device, enable_memory_saver)
  ReqToTokenPool.write(indices, values)
  ReqToTokenPool.available_size()
  ReqToTokenPool.alloc(need_size)
  ReqToTokenPool.free(free_index, List[int]])
  ReqToTokenPool.clear()
  KVCache.__init__(size, page_size, dtype, layer_num, device, enable_memory_saver, start_layer, end_layer)
  KVCache.get_key_buffer(layer_id)
  KVCache.get_value_buffer(layer_id)
  KVCache.get_kv_buffer(layer_id)
  KVCache.set_kv_buffer(layer, loc, cache_k, cache_v)
  KVCache.register_layer_transfer_counter(layer_transfer_counter)
  KVCache.get_cpu_copy(indices)
  KVCache.load_cpu_copy(kv_cache_cpu, indices)
  MHATokenToKVPool.__init__(size, page_size, dtype, head_num, head_dim, layer_num, device, enable_memory_saver, start_layer, end_layer)
  MHATokenToKVPool.get_kv_size_bytes()
  MHATokenToKVPool.get_contiguous_buf_infos()
  MHATokenToKVPool.maybe_get_custom_mem_pool()
  MHATokenToKVPool.get_cpu_copy(indices)
  MHATokenToKVPool.load_cpu_copy(kv_cache_cpu, indices)
  MHATokenToKVPool.get_key_buffer(layer_id)
  MHATokenToKVPool.get_value_buffer(layer_id)
  MHATokenToKVPool.get_kv_buffer(layer_id)
  MHATokenToKVPool.set_kv_buffer(layer, loc, cache_k, cache_v, k_scale, v_scale, layer_id_override)
  MHATokenToKVPool.move_kv_cache(tgt_loc, src_loc)
  SWAKVPool.__init__(size, size_swa, dtype, head_num, head_dim, swa_attention_layer_ids, full_attention_layer_ids, enable_kvcache_transpose, device)
  SWAKVPool.get_kv_size_bytes()
  SWAKVPool.get_contiguous_buf_infos()
  SWAKVPool.get_key_buffer(layer_id)
  SWAKVPool.get_value_buffer(layer_id)
  SWAKVPool.get_kv_buffer(layer_id)
  SWAKVPool.translate_loc_from_full_to_swa(kv_indices)
  SWAKVPool.set_kv_buffer(layer, loc, cache_k, cache_v, k_scale, v_scale)
  AscendTokenToKVPool.get_contiguous_buf_infos()
  AscendTokenToKVPool.set_kv_buffer(layer, loc, cache_k, cache_v, k_scale, v_scale)
set_mla_kv_buffer_kernel(kv_buffer_ptr, cache_k_nope_ptr, cache_k_rope_ptr, loc_ptr, buffer_stride, nope_stride, rope_stride, nope_dim, rope_dim, BLOCK)
set_mla_kv_buffer_triton(kv_buffer, loc, cache_k_nope, cache_k_rope)
  MLATokenToKVPool.__init__(size, page_size, dtype, kv_lora_rank, qk_rope_head_dim, layer_num, device, enable_memory_saver, start_layer, end_layer)
  MLATokenToKVPool.get_kv_size_bytes()
  MLATokenToKVPool.get_contiguous_buf_infos()
  MLATokenToKVPool.maybe_get_custom_mem_pool()
  MLATokenToKVPool.get_key_buffer(layer_id)
  MLATokenToKVPool.get_value_buffer(layer_id)
  MLATokenToKVPool.get_kv_buffer(layer_id)
  MLATokenToKVPool.set_kv_buffer(layer, loc, cache_k, cache_v)
  MLATokenToKVPool.set_mla_kv_buffer(layer, loc, cache_k_nope, cache_k_rope)
  MLATokenToKVPool.get_cpu_copy(indices)
  MLATokenToKVPool.load_cpu_copy(kv_cache_cpu, indices)
  AscendMLAPagedTokenToKVPool.__init__(size, page_size, dtype, kv_lora_rank, qk_rope_head_dim, layer_num, device, enable_memory_saver, start_layer, end_layer)
  AscendMLAPagedTokenToKVPool.get_kv_size_bytes()
  AscendMLAPagedTokenToKVPool.get_kv_buffer(layer_id)
  AscendMLAPagedTokenToKVPool.get_key_buffer(layer_id)
  AscendMLAPagedTokenToKVPool.get_value_buffer(layer_id)
  AscendMLAPagedTokenToKVPool.get_contiguous_buf_infos()
  AscendMLAPagedTokenToKVPool.set_kv_buffer(layer, loc, cache_k, cache_v)
  DoubleSparseTokenToKVPool.__init__(size, page_size, dtype, head_num, head_dim, layer_num, device, heavy_channel_num, enable_memory_saver, start_layer, end_layer)
  DoubleSparseTokenToKVPool.get_key_buffer(layer_id)
  DoubleSparseTokenToKVPool.get_value_buffer(layer_id)
  DoubleSparseTokenToKVPool.get_label_buffer(layer_id)
  DoubleSparseTokenToKVPool.get_kv_buffer(layer_id)
  DoubleSparseTokenToKVPool.set_kv_buffer(layer, loc, cache_k, cache_v, cache_label)
copy_all_layer_kv_cache(data_ptrs, strides, tgt_loc_ptr, src_loc_ptr, num_locs, num_locs_upper)

# python/sglang/srt/mem_cache/memory_pool_host.py
synchronized(debug_only)
  HostKVCache.__init__(device_pool, host_to_device_ratio, host_size, page_size, layout, pin_memory, device)
  HostKVCache.get_size_per_token()
  HostKVCache.init_kv_buffer()
  HostKVCache.load_to_device_per_layer(device_pool, host_indices, device_indices, layer_id, io_backend)
  HostKVCache.backup_from_device_all_layer(device_pool, host_indices, device_indices, io_backend)
  HostKVCache.get_flat_data_page(index)
  HostKVCache.get_dummy_flat_data_page()
  HostKVCache.set_from_flat_data_page(index, data_page)
  HostKVCache.clear()
  HostKVCache.available_size()
  HostKVCache.alloc(need_size)
  HostKVCache.free(indices)
  HostKVCache.get_state(indices)
  HostKVCache.is_reserved(indices)
  HostKVCache.is_protected(indices)
  HostKVCache.is_synced(indices)
  HostKVCache.is_backup(indices)
  HostKVCache.update_backup(indices)
  HostKVCache.update_prefetch(indices)
  HostKVCache.update_synced(indices)
  HostKVCache.protect_write(indices)
  HostKVCache.protect_load(indices)
  HostKVCache.complete_io(indices)
  MHATokenToKVPoolHost.__init__(device_pool, host_to_device_ratio, host_size, page_size, layout, pin_memory, device)
  MHATokenToKVPoolHost.get_size_per_token()
  MHATokenToKVPoolHost.get_ksize_per_token()
  MHATokenToKVPoolHost.init_kv_buffer()
  MHATokenToKVPoolHost.k_buffer()
  MHATokenToKVPoolHost.v_buffer()
  MHATokenToKVPoolHost.load_to_device_per_layer(device_pool, host_indices, device_indices, layer_id, io_backend)
  MHATokenToKVPoolHost.backup_from_device_all_layer(device_pool, host_indices, device_indices, io_backend)
  MHATokenToKVPoolHost.get_flat_data_page(index)
  MHATokenToKVPoolHost.get_dummy_flat_data_page()
  MHATokenToKVPoolHost.set_from_flat_data_page(index, data_page)
  MHATokenToKVPoolHost.get_buffer_meta(keys, indices, local_rank)
  MHATokenToKVPoolHost.get_buffer_with_hash(keys, indices)
  MLATokenToKVPoolHost.__init__(device_pool, host_to_device_ratio, host_size, page_size, layout, pin_memory, device)
  MLATokenToKVPoolHost.get_size_per_token()
  MLATokenToKVPoolHost.get_ksize_per_token()
  MLATokenToKVPoolHost.init_kv_buffer()
  MLATokenToKVPoolHost.load_to_device_per_layer(device_pool, host_indices, device_indices, layer_id, io_backend)
  MLATokenToKVPoolHost.backup_from_device_all_layer(device_pool, host_indices, device_indices, io_backend)
  MLATokenToKVPoolHost.get_flat_data_page(index)
  MLATokenToKVPoolHost.get_dummy_flat_data_page()
  MLATokenToKVPoolHost.set_from_flat_data_page(index, data_page)
  MLATokenToKVPoolHost.get_buffer_meta(keys, indices, local_rank)
  MLATokenToKVPoolHost.get_buffer_with_hash(keys, indices)

# python/sglang/srt/mem_cache/multimodal_cache.py
  MultiModalCache.__init__(max_size)
  MultiModalCache.put(mm_hash, embedding)
  MultiModalCache.has(mm_hash)
  MultiModalCache.get(mm_hash)
  MultiModalCache.clear()
  MultiModalCache.__len__()

# python/sglang/srt/mem_cache/radix_cache.py
  TreeNode.__init__(id)
  TreeNode.evicted()
  TreeNode.backuped()
  TreeNode.protect_host()
  TreeNode.release_host()
  TreeNode.get_last_hash_value()
  TreeNode.__lt__(other)
  RadixCache.__init__(req_to_token_pool, token_to_kv_pool_allocator, page_size, disable, enable_kv_cache_events)
  RadixCache.reset()
  RadixCache.match_prefix(key)
  RadixCache.insert(key, value)
  RadixCache.cache_finished_req(req)
  RadixCache.cache_unfinished_req(req)
  RadixCache.pretty_print()
  RadixCache.total_size()
  RadixCache.evict(num_tokens)
  RadixCache.inc_lock_ref(node)
  RadixCache.dec_lock_ref(node)
  RadixCache.evictable_size()
  RadixCache.protected_size()
  RadixCache.all_values_flatten()
  RadixCache.take_events()

# python/sglang/srt/mem_cache/radix_cache_cpp.py
  RadixCacheCpp.__init__(disable, use_hicache, req_to_token_pool, token_to_kv_pool, tp_cache_group, page_size, hicache_ratio, hicache_size, hicache_write_policy, enable_kv_cache_events, hicache_oracle, enable_write_cancel)
  RadixCacheCpp.reset()
  RadixCacheCpp.match_prefix(key)
  RadixCacheCpp.dec_lock_ref(node)
  RadixCacheCpp.inc_lock_ref(node)
  RadixCacheCpp.evict(num_tokens)
  RadixCacheCpp.evictable_size()
  RadixCacheCpp.protected_size()
  RadixCacheCpp.total_size()
  RadixCacheCpp.cache_finished_req(req)
  RadixCacheCpp.cache_unfinished_req(req)
  RadixCacheCpp.pretty_print()

# python/sglang/srt/mem_cache/swa_radix_cache.py
  TreeNode.__init__(id)
  TreeNode.evicted()
  TreeNode.backuped()
  TreeNode.__lt__(other)
gen_swa_uuid()
  LRUList.__init__(swa)
  LRUList.reset_node_mru(node)
  LRUList.reset_node_and_parents_mru(node, root_node)
  LRUList.insert_mru(node)
  LRUList.remove_node(node)
  LRUList.get_lru_no_lock()
  LRUList.get_leaf_lru_no_lock()
  LRUList.get_prev_no_lock(node, check_id)
  LRUList.get_prev_leaf_no_lock(node, check_id)
  LRUList.in_list(node)
  LRUList.sanity_check_evictable_size()
  LRUList.sanity_check(tree_cache)
  SWARadixCache.__init__(req_to_token_pool, token_to_kv_pool_allocator, sliding_window_size, page_size, disable)
  SWARadixCache.reset()
  SWARadixCache.match_prefix(key)
  SWARadixCache.insert(key, value, prev_prefix_len)
  SWARadixCache.cache_finished_req(req)
  SWARadixCache.cache_unfinished_req(req)
  SWARadixCache.pretty_print()
  SWARadixCache.total_size()
  SWARadixCache.evict(full_num_tokens, swa_num_tokens)
  SWARadixCache.inc_lock_ref(node)
  SWARadixCache.dec_lock_ref(node, swa_uuid_for_lock)
  SWARadixCache.sanity_check()
  SWARadixCache.evictable_size()
  SWARadixCache.full_evictable_size()
  SWARadixCache.swa_evictable_size()
  SWARadixCache.full_lru_list_evictable_size()
  SWARadixCache.swa_lru_list_evictable_size()
  SWARadixCache.protected_size()
  SWARadixCache.full_protected_size()
  SWARadixCache.swa_protected_size()
  SWARadixCache.all_values_flatten()