
# python/sglang/srt/model_executor/cuda_graph_runner.py
get_is_capture_mode()
model_capture_mode()
freeze_gc(enable_cudagraph_gc)
patch_model(model, enable_compile, num_tokens, tp_group)
set_torch_compile_config()
get_batch_sizes_to_capture(model_runner)
get_global_graph_memory_pool()
set_global_graph_memory_pool(val)
  CudaGraphRunner.__init__(model_runner)
  CudaGraphRunner.can_run(forward_batch)
  CudaGraphRunner.capture()
  CudaGraphRunner.capture_one_batch_size(bs, forward)
  CudaGraphRunner.recapture_if_needed(forward_batch)
  CudaGraphRunner.replay_prepare(forward_batch, pp_proxy_tensors)
  CudaGraphRunner.replay(forward_batch, skip_attn_backend_init, pp_proxy_tensors)
  CudaGraphRunner.get_spec_info(num_tokens)

# python/sglang/srt/model_executor/forward_batch_info.py
  ForwardMode.is_prefill()
  ForwardMode.is_extend()
  ForwardMode.is_decode()
  ForwardMode.is_mixed()
  ForwardMode.is_idle()
  ForwardMode.is_decode_or_idle()
  ForwardMode.is_target_verify()
  ForwardMode.is_draft_extend()
  ForwardMode.is_extend_or_draft_extend_or_mixed()
  ForwardMode.is_cuda_graph()
  ForwardMode.is_dummy_first()
  ForwardMode.is_split_prefill()
  CaptureHiddenMode.need_capture()
  CaptureHiddenMode.is_full()
  CaptureHiddenMode.is_last()
  CaptureHiddenMode.__lt__(other)
  ForwardBatch.init_new(cls, batch, model_runner)
  ForwardBatch.merge_mm_inputs()
  ForwardBatch.contains_image_inputs()
  ForwardBatch.contains_audio_inputs()
  ForwardBatch.contains_video_inputs()
  ForwardBatch.contains_mm_inputs()
  ForwardBatch.get_max_chunk_capacity()
  ForwardBatch.set_prefix_chunk_idx(idx)
  ForwardBatch.set_attn_attend_prefix_cache(attn_attend_prefix_cache)
  ForwardBatch.prepare_chunked_kv_indices(device)
  ForwardBatch.prepare_mlp_sync_batch(model_runner)
  ForwardBatch.post_forward_mlp_sync_batch(logits_output)
  ForwardBatch.get_prefix_chunk_seq_lens(prefix_lens, num_prefix_chunks, prefix_chunk_len)
  ForwardBatch.prepare_chunked_prefix_cache_info(device)
  ForwardBatch.can_run_tbo()
enable_num_token_non_padded(server_args)
  PPProxyTensors.__init__(tensors)
  PPProxyTensors.__getitem__(key, slice])
  PPProxyTensors.__setitem__(key, value)
  PPProxyTensors.__len__()
  PPProxyTensors.__eq__(other)
  PPProxyTensors.__repr__()
compute_position(attn_backend, extend_prefix_lens, extend_seq_lens, extend_seq_lens_sum)
compute_position_triton(extend_prefix_lens, extend_seq_lens, extend_seq_lens_sum)
compute_position_kernel(positions, extend_start_loc, extend_prefix_lens, extend_seq_lens, has_prefix)
compute_position_torch(extend_prefix_lens, extend_seq_lens)
clamp_position(seq_lens)
create_chunked_prefix_cache_kv_indices(req_to_token_ptr, req_pool_indices_ptr, chunk_start_idx_ptr, chunk_seq_lens_ptr, chunk_cu_seq_lens_ptr, chunk_kv_indices_ptr, req_to_token_ptr_stride)

# python/sglang/srt/model_executor/model_runner.py
  RankZeroFilter.__init__(is_rank_zero)
  RankZeroFilter.filter(record)
  ModelRunner.__init__(model_config, mem_fraction_static, gpu_id, tp_rank, tp_size, moe_ep_rank, moe_ep_size, pp_rank, pp_size, nccl_port, server_args, dp_rank, is_draft_worker, req_to_token_pool, token_to_kv_pool_allocator)
  ModelRunner.initialize(min_per_gpu_memory)
  ModelRunner.model_specific_adjustment()
  ModelRunner.init_torch_distributed()
  ModelRunner.load_model()
  ModelRunner.update_expert_location(new_expert_location_metadata, update_layer_ids)
  ModelRunner.update_weights_from_disk(model_path, load_format)
  ModelRunner.init_weights_update_group(master_address, master_port, rank_offset, world_size, group_name, backend)
  ModelRunner.update_weights_from_distributed(names, dtypes, shapes, group_name)
  ModelRunner.update_weights_from_tensor(named_tensors, Union[torch.Tensor, 'LocalSerializedTensor']]], load_format)
  ModelRunner.get_weights_by_name(name, truncate_size)
  ModelRunner.init_lora_manager()
  ModelRunner.load_lora_adapter(lora_ref)
  ModelRunner.unload_lora_adapter(lora_ref)
  ModelRunner.profile_max_num_token(total_gpu_memory)
  ModelRunner.set_num_token_hybrid()
  ModelRunner.init_memory_pool(total_gpu_memory, max_num_reqs, max_total_tokens)
  ModelRunner.init_cublas()
  ModelRunner.init_attention_backend()
  ModelRunner.init_double_sparsity_channel_config(selected_channel)
  ModelRunner.init_device_graphs()
  ModelRunner.init_threads_binding()
  ModelRunner.apply_torch_tp()
  ModelRunner.forward_decode(forward_batch, skip_attn_backend_init, pp_proxy_tensors)
  ModelRunner.forward_extend(forward_batch, skip_attn_backend_init, pp_proxy_tensors)
  ModelRunner.forward_idle(forward_batch, pp_proxy_tensors)
  ModelRunner.forward_split_prefill(forward_batch, reinit_attn_backend, forward_count)
  ModelRunner.forward(forward_batch, skip_attn_backend_init, pp_proxy_tensors, reinit_attn_backend, split_forward_count)
  ModelRunner.sample(logits_output, forward_batch)
  ModelRunner.model_is_mrope()
  ModelRunner.save_remote_model(url)
  ModelRunner.save_sharded_model(path, pattern, max_size)
  LocalSerializedTensor.get(rank)

# python/sglang/srt/model_executor/npu_graph_runner.py
  NPUGraphRunner.__init__(model_runner)
  NPUGraphRunner.replay(forward_batch, skip_attn_backend_init, pp_proxy_tensors)