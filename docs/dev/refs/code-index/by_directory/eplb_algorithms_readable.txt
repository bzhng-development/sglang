================================================================================
FUNCTION INDEX: eplb_algorithms module
================================================================================
Total Functions: 11
Documented: 4


============================================================
FILE: python/sglang/srt/eplb/eplb_algorithms/__init__.py
Functions: 2
============================================================

MODULE FUNCTIONS:
----------------------------------------
  L  17: def rebalance_experts(tokens_per_expert: torch.Tensor,
        num_physical_experts: int,
        num_local_physical_experts: int,
        num_groups: Optional[int],
        num_nodes: int,
        algorithm: EplbAlgorithm)

  L  51: def compute_algorithm(raw_algorithm: str,
        num_groups: Optional[int],
        num_nodes: int)
         ‚Üí EplbAlgorithm


============================================================
FILE: python/sglang/srt/eplb/eplb_algorithms/deepseek.py
Functions: 4
============================================================

MODULE FUNCTIONS:
----------------------------------------
  L   9: def balanced_packing(weight: torch.Tensor, num_packs: int)
         ‚Üí Tuple[torch.Tensor, torch.Tensor]
         üìù Pack n weighted objects to m packs, such that each bin contains exactl

  L  54: def replicate_experts(weight: torch.Tensor, num_phy: int)
         ‚Üí Tuple[torch.Tensor, torch.Tensor, torch.Tensor]
         üìù Replicate `num_log` experts to `num_phy` replicas, such that the maxim

  L  85: def rebalance_experts_hierarchical(weight: torch.Tensor,
        num_physical_experts: int,
        num_groups: int,
        num_nodes: int,
        num_gpus: int)
         üìù Parameters:

  L 170: def rebalance_experts(weight: torch.Tensor,
        num_replicas: int,
        num_groups: int,
        num_nodes: int,
        num_gpus: int,
        enable_hierarchical: bool)
         ‚Üí Tuple[torch.Tensor, torch.Tensor, torch.Tensor]
         üìù Entry point for expert-parallelism load balancer.


============================================================
FILE: python/sglang/srt/eplb/eplb_algorithms/deepseek_vec.py
Functions: 5
============================================================

MODULE FUNCTIONS:
----------------------------------------
  L   7: def pack_groups(tokens_per_group: torch.Tensor, num_nodes: int)
         ‚Üí torch.Tensor

  L  35: def make_redundant_experts_chunkwise(tokens_per_expert: torch.Tensor,
        num_physical_experts: int,
        num_local_physical_experts: int,
        num_physical_experts_per_chunk: int)
         ‚Üí Tuple[torch.Tensor, torch.Tensor, torch.Tensor]

  L 184: def decode_rebalance_experts(tokens_per_expert: torch.Tensor,
        num_physical_experts: int,
        num_local_physical_experts: int)

  L 197: def prefill_rebalance_experts(tokens_per_expert: torch.Tensor,
        num_physical_experts: int,
        num_local_physical_experts: int,
        num_groups: int,
        num_nodes: int)

  L 255: def rebalance_experts(tokens_per_expert: torch.Tensor,
        num_physical_experts: int,
        num_local_physical_experts: int,
        num_groups: Optional[int],
        num_nodes: int,
        enable_hierarchical: bool)
