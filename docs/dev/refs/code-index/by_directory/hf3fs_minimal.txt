
# python/sglang/srt/mem_cache/storage/hf3fs/client_hf3fs.py
rsynchronized()
wsynchronized()
  Hf3fsClient.__init__(path, size, bytes_per_page, entries)
  Hf3fsClient.batch_read(offsets, tensors)
  Hf3fsClient.batch_write(offsets, tensors)
  Hf3fsClient.check(offsets, tensors)
  Hf3fsClient.get_size()
  Hf3fsClient.close()
  Hf3fsClient.flush()

# python/sglang/srt/mem_cache/storage/hf3fs/mini_3fs_metadata_server.py
  RankMetadata.__init__(num_pages)
  RankMetadata.exists_keys(keys)
  RankMetadata.reserve_and_allocate_page_indices(keys, str]])
  RankMetadata.confirm_write(written_keys_to_confirm, int]], pages_to_release)
  RankMetadata.delete_keys(keys)
  RankMetadata.clear_all()
  RankMetadata.get_page_indices(keys)
  GlobalMetadataState.__init__(persistence_path, save_interval)
  GlobalMetadataState.load_from_disk()
  GlobalMetadataState.save_to_disk()
  GlobalMetadataState.schedule_save()
  GlobalMetadataState.shutdown()
  Hf3fsMetadataServer.__init__(persistence_path, save_interval)
  Hf3fsMetadataServer.get_rank_metadata(rank)
  Hf3fsMetadataServer.initialize(rank, request)
  Hf3fsMetadataServer.exists(rank, request)
  Hf3fsMetadataServer.reserve_and_allocate_page_indices(rank, request)
  Hf3fsMetadataServer.confirm_write(rank, request)
  Hf3fsMetadataServer.delete_keys(rank, request)
  Hf3fsMetadataServer.clear(rank)
  Hf3fsMetadataServer.get_page_indices(rank, request)
  Hf3fsMetadataServer.run(host, port)
  Hf3fsGlobalMetadataClient.__init__(base_url, max_retries)
  Hf3fsGlobalMetadataClient.initialize(rank, num_pages)
  Hf3fsGlobalMetadataClient.reserve_and_allocate_page_indices(rank, keys, str]])
  Hf3fsGlobalMetadataClient.confirm_write(rank, written_keys_to_confirm, int]], pages_to_release)
  Hf3fsGlobalMetadataClient.delete_keys(rank, keys)
  Hf3fsGlobalMetadataClient.exists(rank, keys)
  Hf3fsGlobalMetadataClient.clear(rank)
  Hf3fsGlobalMetadataClient.get_page_indices(rank, keys)
  Hf3fsLocalMetadataClient.__init__()
  Hf3fsLocalMetadataClient.initialize(rank, num_pages)
  Hf3fsLocalMetadataClient.reserve_and_allocate_page_indices(rank, keys, str]])
  Hf3fsLocalMetadataClient.confirm_write(rank, written_keys_to_confirm, int]], pages_to_release)
  Hf3fsLocalMetadataClient.delete_keys(rank, keys)
  Hf3fsLocalMetadataClient.exists(rank, keys)
  Hf3fsLocalMetadataClient.clear(rank)
  Hf3fsLocalMetadataClient.get_page_indices(rank, keys)
run_metadata_server(host, port, persistence_path, save_interval)

# python/sglang/srt/mem_cache/storage/hf3fs/storage_hf3fs.py
  Hf3fsMetadataInterface.initialize(rank, num_pages)
  Hf3fsMetadataInterface.reserve_and_allocate_page_indices(rank, keys, str]])
  Hf3fsMetadataInterface.confirm_write(rank, written_keys_to_confirm, int]], pages_to_release)
  Hf3fsMetadataInterface.get_page_indices(rank, keys)
  Hf3fsMetadataInterface.delete_keys(rank, keys)
  Hf3fsMetadataInterface.exists(rank, keys)
  Hf3fsMetadataInterface.clear(rank)
  AtomicCounter.__init__(n)
  AtomicCounter.next()
synchronized()
  HiCacheHF3FS.__init__(rank, file_path, file_size, numjobs, bytes_per_page, entries, dtype, metadata_client)
  HiCacheHF3FS.from_env_config(bytes_per_page, dtype, storage_config)
  HiCacheHF3FS.get(key, target_location, target_sizes)
  HiCacheHF3FS.batch_get(keys, target_locations, target_sizes)
  HiCacheHF3FS.set(key, value, target_location, target_sizes)
  HiCacheHF3FS.batch_set(keys, values, target_locations, target_sizes)
  HiCacheHF3FS.delete(key)
  HiCacheHF3FS.exists(key)
  HiCacheHF3FS.clear()
  HiCacheHF3FS.close()

# python/sglang/srt/mem_cache/storage/hf3fs/test_hf3fs_utils.py
test_rw_shm()