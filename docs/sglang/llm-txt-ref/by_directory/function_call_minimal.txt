
# python/sglang/srt/function_call/base_format_detector.py
  BaseFormatDetector.__init__()
  BaseFormatDetector.parse_base_json(action: Any, tools: List[Tool]) -> List[ToolCallItem]
  BaseFormatDetector.detect_and_parse(text: str, tools: List[Tool]) -> StreamingParseResult
  BaseFormatDetector.parse_streaming_increment(new_text: str, tools: List[Tool]) -> StreamingParseResult
  BaseFormatDetector.has_tool_call(text: str) -> bool
  BaseFormatDetector.supports_structural_tag() -> bool
  BaseFormatDetector.structure_info() -> _GetInfoFunc
  BaseFormatDetector.build_ebnf(tools: List[Tool]) -> str

# python/sglang/srt/function_call/deepseekv31_detector.py
  DeepSeekV31Detector.__init__()
  DeepSeekV31Detector.has_tool_call(text: str) -> bool
  DeepSeekV31Detector.detect_and_parse(text: str, tools: List[Tool]) -> StreamingParseResult
  DeepSeekV31Detector.parse_streaming_increment(new_text: str, tools: List[Tool]) -> StreamingParseResult
  DeepSeekV31Detector.structure_info() -> _GetInfoFunc
  DeepSeekV31Detector.build_ebnf(tools: List[Tool])

# python/sglang/srt/function_call/deepseekv3_detector.py
  DeepSeekV3Detector.__init__()
  DeepSeekV3Detector.has_tool_call(text: str) -> bool
  DeepSeekV3Detector.detect_and_parse(text: str, tools: List[Tool]) -> StreamingParseResult
  DeepSeekV3Detector.parse_streaming_increment(new_text: str, tools: List[Tool]) -> StreamingParseResult
  DeepSeekV3Detector.structure_info() -> _GetInfoFunc
  DeepSeekV3Detector.build_ebnf(tools: List[Tool])

# python/sglang/srt/function_call/ebnf_composer.py
  EBNFComposer.get_value_rule(prop: dict, function_format: Literal['pythonic', 'json', 'xml']) -> str
  EBNFComposer.get_type_mapping(function_format: str) -> Dict[str, str]
  EBNFComposer.build_ebnf(tools, function_format: Literal['pythonic', 'json', 'xml'], sequence_start_token: Optional[str], sequence_end_token: Optional[str], individual_call_start_token: Optional[str], individual_call_end_token: Optional[str], tool_call_separator: Optional[str], call_rule_fmt: Optional[str], key_value_rule_fmt: Optional[str], key_value_separator: str)

# python/sglang/srt/function_call/function_call_parser.py
  FunctionCallParser.__init__(tools: List[Tool], tool_call_parser: str)
  FunctionCallParser.has_tool_call(text: str) -> bool
  FunctionCallParser.parse_non_stream(full_text: str) -> Tuple[str, list[ToolCallItem]]
  FunctionCallParser.parse_stream_chunk(chunk_text: str) -> Tuple[str, list[ToolCallItem]]
  FunctionCallParser.get_structure_tag() -> StructuralTagResponseFormat
  FunctionCallParser.get_structure_constraint(tool_choice: Union[ToolChoice, Literal['auto', 'required']]) -> Optional[Tuple[str, Any]]
  FunctionCallParser.get_ebnf(tool_choice: Union[ToolChoice, Literal['required']]) -> Optional[str]

# python/sglang/srt/function_call/glm4_moe_detector.py
get_argument_type(func_name: str, arg_key: str, defined_tools: list)
parse_arguments(json_value)
  Glm4MoeDetector.__init__()
  Glm4MoeDetector.has_tool_call(text: str) -> bool
  Glm4MoeDetector.detect_and_parse(text: str, tools: List[Tool]) -> StreamingParseResult
  Glm4MoeDetector.parse_streaming_increment(new_text: str, tools: List[Tool]) -> StreamingParseResult
  Glm4MoeDetector.supports_structural_tag() -> bool
  Glm4MoeDetector.structure_info() -> _GetInfoFunc
  Glm4MoeDetector.build_ebnf(tools: List[Tool])

# python/sglang/srt/function_call/gpt_oss_detector.py
  GptOssDetector.__init__()
  GptOssDetector.has_tool_call(text: str) -> bool
  GptOssDetector.detect_and_parse(text: str, tools: List[Tool]) -> StreamingParseResult
  GptOssDetector.parse_streaming_increment(new_text: str, tools: List[Tool]) -> StreamingParseResult
  GptOssDetector.structure_info() -> _GetInfoFunc
  GptOssDetector.build_ebnf(tools: List[Tool]) -> str

# python/sglang/srt/function_call/kimik2_detector.py
  KimiK2Detector.__init__()
  KimiK2Detector.has_tool_call(text: str) -> bool
  KimiK2Detector.detect_and_parse(text: str, tools: List[Tool]) -> StreamingParseResult
  KimiK2Detector.parse_streaming_increment(new_text: str, tools: List[Tool]) -> StreamingParseResult
  KimiK2Detector.structure_info() -> _GetInfoFunc
  KimiK2Detector.build_ebnf(tools: List[Tool]) -> str

# python/sglang/srt/function_call/llama32_detector.py
  Llama32Detector.__init__()
  Llama32Detector.has_tool_call(text: str) -> bool
  Llama32Detector.detect_and_parse(text: str, tools: List[Tool]) -> StreamingParseResult
  Llama32Detector.structure_info() -> _GetInfoFunc
  Llama32Detector.build_ebnf(tools: List[Tool])

# python/sglang/srt/function_call/mistral_detector.py
  MistralDetector.__init__()
  MistralDetector.has_tool_call(text: str) -> bool
  MistralDetector.detect_and_parse(text: str, tools: List[Tool]) -> StreamingParseResult
  MistralDetector.structure_info() -> _GetInfoFunc
  MistralDetector.build_ebnf(tools: List[Tool])

# python/sglang/srt/function_call/pythonic_detector.py
  PythonicDetector.__init__()
  PythonicDetector.has_tool_call(text: str) -> bool
  PythonicDetector.detect_and_parse(text: str, tools: List[Tool]) -> StreamingParseResult
  PythonicDetector.parse_streaming_increment(new_text: str, tools: List[Tool]) -> StreamingParseResult
  PythonicDetector.supports_structural_tag() -> bool
  PythonicDetector.structure_info() -> _GetInfoFunc
  PythonicDetector.build_ebnf(tools: List[Tool]) -> Optional[str]

# python/sglang/srt/function_call/qwen25_detector.py
  Qwen25Detector.__init__()
  Qwen25Detector.has_tool_call(text: str) -> bool
  Qwen25Detector.detect_and_parse(text: str, tools: List[Tool]) -> StreamingParseResult
  Qwen25Detector.parse_streaming_increment(new_text: str, tools: List[Tool]) -> StreamingParseResult
  Qwen25Detector.structure_info() -> _GetInfoFunc
  Qwen25Detector.build_ebnf(tools: List[Tool])

# python/sglang/srt/function_call/qwen3_coder_detector.py
  Qwen3CoderDetector.__init__()
  Qwen3CoderDetector.has_tool_call(text: str) -> bool
  Qwen3CoderDetector.detect_and_parse(text: str, tools: List[Tool]) -> StreamingParseResult
  Qwen3CoderDetector.parse_streaming_increment(new_text: str, tools: List[Tool]) -> StreamingParseResult
  Qwen3CoderDetector.supports_structural_tag() -> bool
  Qwen3CoderDetector.structure_info() -> _GetInfoFunc
  Qwen3CoderDetector.build_ebnf(tools: List[Tool])

# python/sglang/srt/function_call/step3_detector.py
get_argument_type(func_name: str, arg_key: str, defined_tools: List[Tool]) -> str
parse_arguments(value: str) -> tuple[Any, bool]
  Step3Detector.__init__()
  Step3Detector.has_tool_call(text: str) -> bool
  Step3Detector.detect_and_parse(text: str, tools: List[Tool]) -> StreamingParseResult
  Step3Detector.parse_streaming_increment(new_text: str, tools: List[Tool]) -> StreamingParseResult
  Step3Detector.supports_structural_tag() -> bool
  Step3Detector.structure_info() -> _GetInfoFunc
  Step3Detector.build_ebnf(tools: List[Tool]) -> str
