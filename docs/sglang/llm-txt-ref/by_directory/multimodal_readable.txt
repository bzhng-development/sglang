================================================================================
FUNCTION INDEX: multimodal module
================================================================================
Total Functions: 11
Documented: 7


============================================================
FILE: python/sglang/srt/multimodal/mm_utils.py
Functions: 11
============================================================

MODULE FUNCTIONS:
----------------------------------------
  L  42: def has_valid_data(data)
         → bool

  L  50: def select_best_resolution(original_size, possible_resolutions)
         📝 Selects the best resolution from a list of possible resolutions based on the original size.
            Args:
            original_size (tuple): The original size of the image in the format (width, height).
            possible_resolutions (list): A list of possible resolutions in the format [(width1, height1), (width2, height2), ...].
            Returns:
            tuple: The best fit resolution in the format (width, height).

  L  90: def resize_and_pad_image(image, target_resolution)
         📝 Resize and pad an image to a target resolution while maintaining aspect ratio.
            Args:
            image (PIL.Image.Image): The input image.
            target_resolution (tuple): The target resolution (width, height) of the image.
            Returns:
            PIL.Image.Image: The resized and padded image.

  L 125: def divide_to_patches(image, patch_size)
         📝 Divides an image into patches of a specified size.
            Args:
            image (PIL.Image.Image): The input image.
            patch_size (int): The size of each patch.
            Returns:
            list: A list of PIL.Image.Image objects representing the patches.

  L 147: def get_anyres_image_grid_shape(image_size, grid_pinpoints, patch_size)
         📝 Calculate the shape of the image patch grid after the preprocessing for images of any resolution.
            Args:
            image_size (tuple): The size of the input image in the format (width, height).
            grid_pinpoints (str): A string representation of a list of possible resolutions.
            patch_size (int): The size of each image patch.
            Returns:
            tuple: The shape of the image patch grid in the format (width, height).

  L 187: def process_anyres_image(image, processor, grid_pinpoints)
         📝 Process an image with variable resolutions.
            Args:
            image (PIL.Image.Image): The input image to be processed.
            processor: The image processor object.
            grid_pinpoints (str): A string representation of a list of possible resolutions.
            Returns:
            np.array: An np array containing the processed image patches.

  L 254: def load_image_from_base64(image)

  L 258: def expand2square(pil_img, background_color)

  L 274: def unpad_image(tensor, original_size)
         📝 Unpads a PyTorch tensor of a padded and resized image.
            Args:
            tensor (torch.Tensor): The image tensor, assumed to be in CxHxW format.
            original_size (tuple): The original size of the image (height, width).
            Returns:
            torch.Tensor: The unpadded image tensor.

  L 305: def unpad_image_shape(current_height, current_width, original_size)
         📝 Unpads a PyTorch tensor of a padded and resized image
            and returns the new shape.

  L 329: def process_images(images, image_processor, model_cfg)
