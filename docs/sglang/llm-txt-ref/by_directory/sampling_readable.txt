================================================================================
FUNCTION INDEX: sampling module
================================================================================
Total Functions: 16
Documented: 4


============================================================
FILE: python/sglang/srt/sampling/custom_logit_processor.py
Functions: 4
============================================================


CLASS: CustomLogitProcessor
----------------------------------------
  L  23: __call__(self, logits: torch.Tensor, custom_param_list: Optional[List[Dict[str, Any]]])
         ‚Üí torch.Tensor
         üìù Define the callable behavior.

  L  32: to_str(cls)
         ‚Üí str
         üìù Serialize the callable function to a JSON-compatible string.

  L  37: from_str(cls, json_str: str)
         üìù Deserialize a callable function from a JSON string.


CLASS: DisallowedTokensLogitsProcessor
----------------------------------------
  L  43: __call__(self, logits: torch.Tensor, custom_param_list: Optional[List[Dict[str, Any]]])
         ‚Üí torch.Tensor


============================================================
FILE: python/sglang/srt/sampling/sampling_batch_info.py
Functions: 9
============================================================

MODULE FUNCTIONS:
----------------------------------------
  L 353: def merge_bias_tensor(lhs: Optional[torch.Tensor],
        rhs: Optional[torch.Tensor],
        bs1: int,
        bs2: int,
        device: str,
        default: float)
         üìù Merge two bias tensors for batch merging.
            Args:
            lhs: Left-hand side tensor
            rhs: Right-hand side tensor
            bs1: Batch size of left-hand side tensor
            bs2: Batch size of right-hand side tensor
            device: Device to place the merged tensor on
            default: Default value for missing tensor elements
            Returns:
            Merged tensor or None if both inputs are None


CLASS: SamplingBatchInfo
----------------------------------------
  L  70: from_schedule_batch(cls, batch: ScheduleBatch, vocab_size: int)

  L 171: __len__(self)

  L 174: update_regex_vocab_mask(self)

  L 201: update_penalties(self)

  L 212: apply_logits_bias(self, logits: torch.Tensor)

  L 227: filter_batch(self, keep_indices: List[int], keep_indices_device: torch.Tensor)

  L 266: merge_custom_logit_processor(lhs: Optional[Dict[int, Tuple[CustomLogitProcessor, torch.Tensor]]], rhs: Optional[Dict[int, Tuple[CustomLogitProcessor, torch.Tensor]]], bs1: int, bs2: int, device: str)

  L 305: merge_batch(self, other: 'SamplingBatchInfo')


============================================================
FILE: python/sglang/srt/sampling/sampling_params.py
Functions: 3
============================================================


CLASS: SamplingParams
----------------------------------------
  L  31: __init__(self, max_new_tokens: int, stop: Optional[Union[str, List[str]]], stop_token_ids: Optional[List[int]], temperature: float, top_p: float, top_k: int, min_p: float, frequency_penalty: float, presence_penalty: float, repetition_penalty: float, min_new_tokens: int, n: int, json_schema: Optional[str], regex: Optional[str], ebnf: Optional[str], structural_tag: Optional[str], ignore_eos: bool, skip_special_tokens: bool, spaces_between_special_tokens: bool, no_stop_trim: bool, custom_params: Optional[Dict[str, Any]], stream_interval: Optional[int], logit_bias: Optional[Dict[str, float]])
         ‚Üí None

  L  92: verify(self, vocab_size)

  L 149: normalize(self, tokenizer)
