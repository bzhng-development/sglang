
# python/sglang/lang/api.py
function(func: Optional[Callable], num_api_spec_tokens: Optional[int])
Runtime()
Engine()
set_default_backend(backend: BaseBackend)
flush_cache(backend: Optional[BaseBackend])
get_server_info(backend: Optional[BaseBackend])
gen(name: Optional[str], max_tokens: Optional[int], min_tokens: Optional[int], n: Optional[int], stop: Optional[Union[str, List[str]]], stop_token_ids: Optional[List[int]], temperature: Optional[float], top_p: Optional[float], top_k: Optional[int], min_p: Optional[float], frequency_penalty: Optional[float], presence_penalty: Optional[float], ignore_eos: Optional[bool], return_logprob: Optional[bool], logprob_start_len: Optional[int], top_logprobs_num: Optional[int], return_text_in_logprobs: Optional[bool], dtype: Optional[Union[type, str]], choices: Optional[List[str]], choices_method: Optional[ChoicesSamplingMethod], regex: Optional[str], json_schema: Optional[str])
gen_int(name: Optional[str], max_tokens: Optional[int], n: Optional[int], stop: Optional[Union[str, List[str]]], stop_token_ids: Optional[List[int]], temperature: Optional[float], top_p: Optional[float], top_k: Optional[int], min_p: Optional[float], frequency_penalty: Optional[float], presence_penalty: Optional[float], ignore_eos: Optional[bool], return_logprob: Optional[bool], logprob_start_len: Optional[int], top_logprobs_num: Optional[int], return_text_in_logprobs: Optional[bool])
gen_string(name: Optional[str], max_tokens: Optional[int], n: Optional[int], stop: Optional[Union[str, List[str]]], stop_token_ids: Optional[List[int]], temperature: Optional[float], top_p: Optional[float], top_k: Optional[int], min_p: Optional[float], frequency_penalty: Optional[float], presence_penalty: Optional[float], ignore_eos: Optional[bool], return_logprob: Optional[bool], logprob_start_len: Optional[int], top_logprobs_num: Optional[int], return_text_in_logprobs: Optional[bool])
image(expr: SglExpr)
video(path: str, num_frames: int)
select(name: Optional[str], choices: Optional[List[str]], temperature: float, choices_method: ChoicesSamplingMethod)
system(expr: Optional[SglExpr])
user(expr: Optional[SglExpr])
assistant(expr: Optional[SglExpr])
system_begin()
system_end()
user_begin()
user_end()
assistant_begin()
assistant_end()
separate_reasoning(expr: Optional[SglExpr], model_type: Optional[str])

# python/sglang/lang/chat_template.py
  ChatTemplate.get_prefix_and_suffix(role: str, hist_messages: List[Dict]) -> Tuple[str, str]
  ChatTemplate.get_prompt(messages: List[Dict]) -> str
register_chat_template(template)
register_chat_template_matching_function(func)
get_chat_template(name)
get_chat_template_by_model_path(model_path)
match_deepseek(model_path: str)
match_deepseek_janus_pro(model_path: str)
match_dbrx(model_path: str)
match_vicuna(model_path: str)
match_llama2_chat(model_path: str)
match_mistral(model_path: str)
match_llama3_instruct(model_path: str)
match_chat_ml(model_path: str)
match_chat_yi(model_path: str)
match_gemma_it(model_path: str)
match_openbmb_minicpm(model_path: str)
match_c4ai_command_r(model_path: str)
match_granite_instruct(model_path: str)
match_gemma3_instruct(model_path: str)
match_internvl_chat(model_path: str)
match_interns1_chat(model_path: str)

# python/sglang/lang/choices.py
  ChoicesSamplingMethod.requires_unconditional_logprobs() -> bool
  ChoicesSamplingMethod.__call__() -> ChoicesDecision
  TokenLengthNormalized.__call__() -> ChoicesDecision
  GreedyTokenSelection.__call__() -> ChoicesDecision
  UnconditionalLikelihoodNormalized.requires_unconditional_logprobs() -> bool
  UnconditionalLikelihoodNormalized.__call__() -> ChoicesDecision

# python/sglang/lang/compiler.py
compile_func(function, backend)
  CompiledFunction.__init__(tracer, function)
  CompiledFunction.build_graph(tracer)
  CompiledFunction.topological_sort()
  CompiledFunction.print_graph()
  CompiledFunction.run_internal(backend, kwargs, default_sampling_para)
  CompiledFunction.run()
  CompiledFunction.run_batch(batch_kwargs)
  CompGraphNode.__init__(expr: SglExpr, prev_node, next_nodes, source_node)
  CompGraphNode.add_next_node(other)
  CompGraphNode.__repr__()

# python/sglang/lang/interpreter.py
run_internal(state, program, func_args, func_kwargs, sync)
run_program(program, backend, func_args, func_kwargs, default_sampling_para, stream, sync, use_thread)
run_program_batch(program, backend, batch_arguments, default_sampling_para, num_threads, progress_bar, generator_style)
cache_program(program, backend)
  StreamExecutor.__init__(backend, arguments, default_sampling_para, chat_template, stream, num_api_spec_tokens, use_thread)
  StreamExecutor.submit(expr: SglExpr)
  StreamExecutor.sync()
  StreamExecutor.get_var(name)
  StreamExecutor.set_var(name, value)
  StreamExecutor.get_meta_info(name, timeout)
  StreamExecutor.fork(size: int, position_ids_offset: Optional[List[int]])
  StreamExecutor.text()
  StreamExecutor.messages()
  StreamExecutor.error()
  StreamExecutor.end()
  StreamExecutor.__del__()
  ProgramState.__init__(stream_executor: StreamExecutor)
  ProgramState.system(expr: Optional[SglExpr])
  ProgramState.user(expr: Optional[SglExpr])
  ProgramState.assistant(expr: Optional[SglExpr])
  ProgramState.var_scope(name: str)
  ProgramState.fork(size: int, position_ids_offset: Optional[List[int]])
  ProgramState.copy(position_ids_offset: Optional[List[int]])
  ProgramState.text()
  ProgramState.messages()
  ProgramState.sync()
  ProgramState.error()
  ProgramState.text_iter(var_name: Optional[str])
  ProgramState.text_async_iter(var_name: Optional[str], return_meta_data: bool)
  ProgramState.get_var(name)
  ProgramState.set_var(name, value)
  ProgramState.get_meta_info(name)
  ProgramState.__iadd__(other)
  ProgramState.__getitem__(name)
  ProgramState.__setitem__(name, value)
  ProgramState.__contains__(name)
  ProgramState.__del__()
  ProgramState.__repr__() -> str
  ProgramStateGroup.__init__(states: List[ProgramState], src_state: Optional[ProgramState])
  ProgramStateGroup.join(mode: str)
  ProgramStateGroup.__getitem__(i: int)
  ProgramStateGroup.__setitem__(i: int, value)
  ProgramStateGroup.__iadd__(other)

# python/sglang/lang/ir.py
  SglSamplingParams.clone()
  SglSamplingParams.to_openai_kwargs()
  SglSamplingParams.to_vertexai_kwargs()
  SglSamplingParams.to_anthropic_kwargs()
  SglSamplingParams.to_litellm_kwargs()
  SglSamplingParams.to_srt_kwargs()
  SglFunction.__init__(func, num_api_spec_tokens, bind_arguments)
  SglFunction.bind()
  SglFunction.run()
  SglFunction.run_batch(batch_kwargs)
  SglFunction.trace()
  SglFunction.cache(backend)
  SglFunction.compile()
  SglFunction.__call__()
  SglExpr.__init__()
  SglExpr.__add__(other)
  SglExpr.__radd__(other)
  SglExpr.concatenate_ir(a, b)
  SglExpr.print_graph_dfs()
  SglExprList.__init__(expr_list: List[SglExpr])
  SglExprList.__repr__()
  SglArgument.__init__(name: str, value: str)
  SglArgument.__repr__()
  SglArgument.__len__()
  SglArgument.__getitem__(i)
  SglArgument.__int__()
  SglArgument.__bool__()
  SglArgument.__format__()
  SglImage.__init__(path: str)
  SglImage.__repr__() -> str
  SglVideo.__init__(path: str, num_frames: int)
  SglVideo.__repr__() -> str
  SglGen.__init__(name: Optional[str], max_new_tokens: Optional[int], min_new_tokens: Optional[int], n: Optional[int], stop: Optional[Union[str, List[str]]], stop_token_ids: Optional[List[int]], temperature: Optional[float], top_p: Optional[float], top_k: Optional[int], min_p: Optional[float], frequency_penalty: Optional[float], presence_penalty: Optional[float], ignore_eos: Optional[bool], return_logprob: Optional[bool], logprob_start_len: Optional[int], top_logprobs_num: Optional[int], return_text_in_logprobs: Optional[bool], dtype: Optional[type], regex: Optional[str], json_schema: Optional[str])
  SglGen.__repr__()
  SglConstantText.__init__(value: str)
  SglConstantText.__repr__()
  SglRoleBegin.__init__(role: str)
  SglRoleBegin.__repr__()
  SglRoleEnd.__init__(role: str)
  SglRoleEnd.__repr__()
  SglSelect.__init__(name: str, choices: List[str], temperature: float, choices_method: ChoicesSamplingMethod)
  SglSelect.__repr__()
  SglFork.__init__(number: int, position_ids_offset)
  SglFork.__repr__()
  SglGetForkItem.__init__(index: int)
  SglGetForkItem.__repr__()
  SglVariable.__init__(name: str, source)
  SglVariable.__repr__()
  SglVarScopeBegin.__init__(name: str)
  SglVarScopeBegin.__repr__()
  SglVarScopeEnd.__init__(name: str)
  SglVarScopeEnd.__repr__()
  SglConcateAndAppend.__init__(states)
  SglConcateAndAppend.__repr__()
  SglCommitLazy.__init__()
  SglCommitLazy.__repr__()
  SglSeparateReasoning.__init__(model_type: str, expr: SglExpr)
  SglSeparateReasoning.process_name_for_reasoning(name)
  SglSeparateReasoning.__repr__()

# python/sglang/lang/tracer.py
extract_prefix_by_tracing(program, backend)
trace_program(program, arguments, backend)
  TracerProgramState.__init__(backend, arguments, only_trace_prefix)
  TracerProgramState.fork(size: int, position_ids_offset: Optional[List[int]])
  TracerProgramState.__iadd__(other)
  TracerProgramState.get_var(name)
  TracerProgramState.flatten_nodes()
  TracerProgramState.__del__()
  TracingScope.__init__(tracer_state: TracerProgramState)
  TracingScope.__enter__()
  TracingScope.__exit__(exc_type, exc_value, traceback)
  TracingScope.get_current_scope()
  TracingScope.add_child_state(state: TracerProgramState)
