================================================================================
FUNCTION INDEX: metrics module
================================================================================
Total Functions: 15
Documented: 2


============================================================
FILE: python/sglang/srt/metrics/collector.py
Functions: 12
============================================================


CLASS: SchedulerMetricsCollector
----------------------------------------
  L 153: __init__(self, labels: Dict[str, str])
         ‚Üí None

  L 275: increment_bootstrap_failed_reqs(self)
         ‚Üí None

  L 278: increment_transfer_failed_reqs(self)
         ‚Üí None

  L 281: log_stats(self, stats: SchedulerStats)
         ‚Üí None


CLASS: TimeStats
----------------------------------------
  L  51: __str__(self)
         ‚Üí str

  L 106: format_duration(self, duration: float)
         ‚Üí str

  L 109: get_type(self)
         ‚Üí RequestType
         üìù Determine the type of request based on timestamp values.


CLASS: TokenizerMetricsCollector
----------------------------------------
  L 310: __init__(self, labels: Dict[str, str], bucket_time_to_first_token: Optional[List[float]], bucket_inter_token_latency: Optional[List[float]], bucket_e2e_request_latency: Optional[List[float]], collect_tokens_histogram: bool)
         ‚Üí None

  L 516: observe_one_finished_request(self, prompt_tokens: int, generation_tokens: int, cached_tokens: int, e2e_latency: float, has_grammar: bool)

  L 536: observe_time_to_first_token(self, value: float)

  L 539: observe_inter_token_latency(self, internval: float, num_new_tokens: int)

  L 552: observe_one_aborted_request(self)


============================================================
FILE: python/sglang/srt/metrics/func_timer.py
Functions: 3
============================================================

MODULE FUNCTIONS:
----------------------------------------
  L  26: def enable_func_timer()

  L  45: def exponential_buckets(start: float, width: float, length: int)
         ‚Üí List[float]

  L  52: def time_func_latency(func: Callable, name: Optional[str])
         ‚Üí Callable[..., Any]
         üìù A decorator to observe the latency of a function's execution. Supports both sync and async functions.
            NOTE: We use our own implementation of a timer decorator since prometheus_client does not support async
            context manager yet.
            Overhead: The overhead introduced here in case of an async function could likely be because of `await` introduced
            which will return in another coroutine object creation and under heavy load could see longer wall time
            (scheduling delays due to introduction of another awaitable).
