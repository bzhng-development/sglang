
# python/sglang/srt/sampling/penaltylib/frequency_penalty.py
  BatchedFrequencyPenalizer.__init__(orchestrator: BatchedPenalizerOrchestrator)

# python/sglang/srt/sampling/penaltylib/min_new_tokens.py
  BatchedMinNewTokensPenalizer.__init__(orchestrator: BatchedPenalizerOrchestrator)

# python/sglang/srt/sampling/penaltylib/orchestrator.py
  BatchedPenalizerOrchestrator.__init__(vocab_size: int, batch: ScheduleBatch, penalizers: Set[Type['_BatchedPenalizer']])
  BatchedPenalizerOrchestrator.batch() -> ScheduleBatch | None
  BatchedPenalizerOrchestrator.batch(value: Optional[ScheduleBatch])
  BatchedPenalizerOrchestrator.reqs()
  BatchedPenalizerOrchestrator.cumulate_output_tokens(output_ids: torch.Tensor)
  BatchedPenalizerOrchestrator.apply(logits: torch.Tensor) -> torch.Tensor
  BatchedPenalizerOrchestrator.filter(keep_indices: torch.Tensor)
  BatchedPenalizerOrchestrator.merge(their: 'BatchedPenalizerOrchestrator')
  _BatchedPenalizer.is_prepared() -> bool
  _BatchedPenalizer.is_required() -> bool
  _BatchedPenalizer.prepare()
  _BatchedPenalizer.prepare_if_required()
  _BatchedPenalizer.teardown()
  _BatchedPenalizer.cumulate_output_tokens(output_ids: torch.Tensor)
  _BatchedPenalizer.apply(logits: torch.Tensor) -> torch.Tensor
  _BatchedPenalizer.filter(keep_indices: torch.Tensor)
  _BatchedPenalizer.merge(their: '_BatchedPenalizer')

# python/sglang/srt/sampling/penaltylib/presence_penalty.py
  BatchedPresencePenalizer.__init__(orchestrator: BatchedPenalizerOrchestrator)
